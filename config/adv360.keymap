/*
 * Copyright (c) 2020 The ZMK Contributors
 *
 * SPDX-License-Identifier: MIT
 */
/* THIS FILE WAS GENERATED!
 *
 * This file was generated automatically. You may or may not want to
 * edit it directly.
 */

#include <behaviors.dtsi>
#include <dt-bindings/zmk/backlight.h>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/rgb.h>

&caps_word { continue-list = <UNDERSCORE BACKSPACE DELETE NUMBER_1 NUMBER_2 NUMBER_3 NUMBER_4 NUMBER_5 NUMBER_6 NUMBER_7 NUMBER_8 NUMBER_9 NUMBER_0 MINUS KP_MINUS>; };

/ {
    behaviors {
        #include "macros.dtsi"
    #include "version.dtsi"

        hml: hml {
            compatible = "zmk,behavior-hold-tap";
            label = "hmk";
            #binding-cells = <2>;
            tapping-term-ms = <800>;
            flavor = "balanced";
            bindings = <&kp>, <&kp>;

            quick-tap-ms = <175>;
            hold-trigger-key-positions = <7 8 9 10 11 12 13 21 22 23 24 25 26 27 38 39 40 41 42 43 44 45 54 55 56 57 58 59 71 72 73 74 75 37 38 39 40 41 42 43 44 53 54 55 56 57 58 68 69 70 71 72 73 74 35 36 37 38 52 53 65 66 67 68 69 70 71 72 73>;
            require-prior-idle-ms = <150>;
            hold-trigger-on-release;
        };

        hmr: hmr {
            compatible = "zmk,behavior-hold-tap";
            label = "HMR";
            #binding-cells = <2>;
            tapping-term-ms = <800>;
            flavor = "balanced";
            bindings = <&kp>, <&kp>;

            quick-tap-ms = <175>;
            require-prior-idle-ms = <150>;
            hold-trigger-on-release;
            hold-trigger-key-positions = <0 1 2 3 4 5 6 14 15 16 17 18 19 20 28 29 30 31 32 33 34 35 36 46 47 48 49 50 51 52 60 61 62 63 64 65 66 67 37 38 53 68 69 70>;
        };

        hmsl: hmsl {
            compatible = "zmk,behavior-hold-tap";
            label = "HMSL";
            bindings = <&kp>, <&kp>;

            #binding-cells = <2>;
            hold-trigger-key-positions = <7 8 9 10 11 12 13 21 22 23 24 25 26 27 37 38 39 40 41 42 43 44 45 53 54 55 56 57 58 59 68 69 70 71 72 73 74 75 35 36 37 38 52 53 65 66 67 68 69>;
            flavor = "tap-preferred";
            tapping-term-ms = <150>;
            quick-tap-ms = <300>;
            require-prior-idle-ms = <80>;
        };

        hmsr: hmsr {
            compatible = "zmk,behavior-hold-tap";
            label = "HMSR";
            bindings = <&kp>, <&kp>;

            #binding-cells = <2>;
            flavor = "tap-preferred";
            tapping-term-ms = <150>;
            quick-tap-ms = <300>;
            require-prior-idle-ms = <80>;
            hold-trigger-key-positions = <0 1 2 3 4 5 6 14 15 16 17 18 19 20 28 29 30 31 32 33 34 35 36 46 47 48 49 50 51 52 60 61 62 63 64 65 66 67 37 38 53 68 69 70>;
        };

        space: space {
            compatible = "zmk,behavior-hold-tap";
            label = "SPACE";
            bindings = <&mo>, <&kp>;

            #binding-cells = <2>;
            flavor = "balanced";
            tapping-term-ms = <200>;
            quick-tap-ms = <125>;
        };

        M_UndoRedo: M_UndoRedo {
            compatible = "zmk,behavior-mod-morph";
            label = "M_UNDOREDO";
            bindings = <&kp LG(Z)>, <&kp LS(LG(Z))>;

            #binding-cells = <0>;
            mods = <(MOD_RSFT)>;
        };

        w_UndoRedo: w_UndoRedo {
            compatible = "zmk,behavior-mod-morph";
            label = "W_UNDOREDO";
            bindings = <&kp LC(Z)>, <&kp LS(LC(Z))>;

            #binding-cells = <0>;
            mods = <(MOD_RSFT)>;
        };

        w_select_all_none: w_select_all_none {
            compatible = "zmk,behavior-mod-morph";
            label = "W_SELECT_ALL_NONE";
            bindings = <&kp LA(A)>, <&select_none>;

            #binding-cells = <0>;
            mods = <(MOD_RSFT)>;
        };

        w_alt_tab_behaviour: w_alt_tab_behaviour {
            compatible = "zmk,behavior-hold-tap";
            label = "W_ALT_TAB_BEHAVIOUR";
            bindings = <&w_alt_tab_layer>, <&kp>;

            #binding-cells = <2>;
            tapping-term-ms = <150>;
            flavor = "hold-preferred";
        };

        m_alt_tab_behaviour: m_alt_tab_behaviour {
            compatible = "zmk,behavior-hold-tap";
            label = "M_ALT_TAB_BEHAVIOUR";
            bindings = <&m_alt_tab_layer>, <&kp>;

            #binding-cells = <2>;
            tapping-term-ms = <150>;
            flavor = "balanced";
        };
    };

    combos {
        compatible = "zmk,combos";

        Win_Base_Prev_Word {
            bindings = <&kp LC(LEFT)>;
            key-positions = <71 72>;
            layers = <4>;
            timeout-ms = <50>;
        };

        Win_Base_Next_Word {
            bindings = <&kp RC(RIGHT)>;
            key-positions = <73 74>;
            layers = <4>;
            timeout-ms = <50>;
        };

        Win_Nav_Prev_Word {
            bindings = <&kp LC(LEFT)>;
            key-positions = <30 31>;
            layers = <6>;
            timeout-ms = <50>;
        };

        Win_Nav_Next_Word {
            bindings = <&kp RC(RIGHT)>;
            key-positions = <31 32>;
            layers = <6>;
            timeout-ms = <50>;
        };

        w_alt_tab {
            bindings = <&w_alt_tab_behaviour 7 LEFT_ALT>;
            key-positions = <63 64>;
            layers = <4>;
            timeout-ms = <50>;
        };

        Mac_Base_Prev_Word {
            bindings = <&kp LA(LEFT)>;
            key-positions = <71 72>;
            timeout-ms = <50>;
            layers = <0 1>;
        };

        Mac_Base_Next_Word {
            bindings = <&kp RA(RIGHT)>;
            key-positions = <73 74>;
            timeout-ms = <50>;
            layers = <0 1>;
        };

        Mac_Nav_Pev_Word {
            bindings = <&kp LA(LEFT)>;
            key-positions = <30 31>;
            timeout-ms = <50>;
            layers = <2>;
        };

        Mac_Nav_Next_Word {
            bindings = <&kp RA(RIGHT)>;
            key-positions = <31 32>;
            timeout-ms = <50>;
            layers = <2>;
        };

        Cappy {
            bindings = <&caps_word>;
            key-positions = <46 65>;
            timeout-ms = <50>;
            layers = <0 4>;
        };
    };

    macros {
        select_none: select_none {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp DOWN &kp UP_ARROW &kp RIGHT &kp LEFT>;
            label = "SELECT_NONE";
            wait-ms = <1>;
        };

        layer_with_mod: w_alt_tab {
            compatible = "zmk,behavior-macro-two-param";
            #binding-cells = <2>;
            bindings =
                <&macro_param_1to1>,
                <&macro_press>,
                <&mo MACRO_PLACEHOLDER &macro_param_2to1>,
                <&macro_press>,
                <&kp MACRO_PLACEHOLDER>,
                <&macro_pause_for_release>,
                <&macro_param_2to1>,
                <&macro_release>,
                <&kp MACRO_PLACEHOLDER &macro_param_1to1>,
                <&macro_release>,
                <&mo MACRO_PLACEHOLDER>;

            label = "W_ALT_TAB";
        };

        w_alt_tab_layer: test {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings =
                <&macro_press>,
                <&mo 8>,
                <&macro_press>,
                <&kp LEFT_ALT>,
                <&macro_pause_for_release>,
                <&macro_release>,
                <&kp LEFT_ALT>,
                <&macro_release>,
                <&mo 8>;

            label = "TEST";
        };

        m_alt_tab_layer: m_alt_tab {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings =
                <&macro_press>,
                <&mo 8>,
                <&macro_press>,
                <&kp LGUI>,
                <&macro_pause_for_release>,
                <&macro_release>,
                <&kp LGUI>,
                <&macro_release>,
                <&mo 8>;

            label = "M_ALT_TAB";
        };
    };

    keymap {
        compatible = "zmk,keymap";

        MacBase {
            bindings = <
&kp GRAVE                      &kp N1        &kp N2       &kp N3             &kp N4       &kp N5  &mo 9                                                                      &mo 9                 &kp N6  &kp N7       &kp N8         &kp N9            &kp N0                &kp MINUS
&kp TAB                        &kp Q         &kp W        &kp E              &kp R        &kp T   &none                                                                      &none                 &kp Y   &kp U        &kp I          &kp O             &kp P                 &kp BSLH
&m_alt_tab_behaviour 0 ESCAPE  &hml LCTRL A  &hml LALT S  &hml LEFT_SHIFT D  &hml LGUI F  &kp G   &kp LS(LA(LC(LGUI)))  &kp LCTRL        &kp LALT      &kp LGUI   &kp RCTRL  &kp RS(RA(RC(RGUI)))  &kp H   &hmr RGUI J  &hmr RSHIFT K  &hmr RIGHT_ALT L  &hmr RCTRL SEMICOLON  &kp SQT
&kp LSHFT                      &kp Z         &kp X        &kp C              &kp V        &kp B                                          &kp END       &kp PG_UP                                   &kp N   &kp M        &kp COMMA      &kp DOT           &kp FSLH              &kp RSHFT
&mo 2                          &M_UndoRedo   &kp LG(X)    &kp LG(C)          &kp LG(V)            &space 1 BACKSPACE    &space 3 DELETE  &kp HOME      &kp PG_DN  &kp ENTER  &space 2 SPACE                &kp LEFT     &kp DOWN       &kp UP_ARROW      &kp RIGHT             &mo 2
            >;
        };

        MacSymbols {
            bindings = <
&kp BACKSLASH    &kp GRAVE       &kp LEFT_PARENTHESIS  &kp RIGHT_PARENTHESIS  &kp SEMICOLON     &kp COMMA      &trans                                                     &none      &none        &kp N7        &kp N8        &kp N9        &none          &kp BACKSLASH
&kp EXCLAMATION  &kp LEFT_BRACE  &kp SINGLE_QUOTE      &kp DOUBLE_QUOTES      &kp RIGHT_BRACE   &kp QUESTION   &kp PERCENT                                                &none      &kp PERCENT  &kp N7        &kp N8        &kp N9        &none          &kp TAB
&kp POUND        &kp CARET       &kp EQUAL             &kp UNDER              &kp DOLLAR        &kp STAR       &kp COLON    &none  &none      &kp BACKSLASH  &kp PERCENT  &none      &kp COLON    &kp NUMBER_4  &kp N5        &kp NUMBER_6  &kp SEMICOLON  &kp BACKSPACE
&kp TILDE        &kp LESS_THAN   &kp PIPE              &kp MINUS              &kp GREATER_THAN  &kp KP_DIVIDE                      &none      &kp DOT                                &kp N0       &kp NUMBER_1  &kp NUMBER_2  &kp NUMBER_3  &kp SLASH      &none
&kp AT           &kp AMPERSAND   &kp LEFT_BRACKET      &kp RIGHT_BRACKET      &kp PLUS                         &trans       &none  &none      &kp STAR       &kp ENTER    &kp SPACE               &kp LEFT      &kp DOWN      &kp UP_ARROW  &kp RIGHT      &none
            >;
        };

        MacNavigation {
            bindings = <
&none  &none       &none            &none         &none          &none          &none                                               &none          &none  &none            &none      &none      &none              &none
&none  &none       &kp LG(LEFT)     &kp UP_ARROW  &kp LG(RIGHT)  &kp PAGE_UP    &none                                               &none          &none  &kp RG(RS(G))    &kp RG(F)  &kp RG(G)  &none              &none
&none  &kp LSHIFT  &kp LEFT         &kp DOWN      &kp RIGHT      &kp PAGE_DOWN  &kp LC(LEFT)   &none       &none      &none  &none  &kp RC(RIGHT)  &none  &kp RIGHT_SHIFT  &kp RCTRL  &kp RALT   &kp RIGHT_COMMAND  &none
&none  &kp LG(W)   &kp LS(LC(TAB))  &kp LG(L)     &kp LC(TAB)    &kp LG(T)                                 &none      &none                        &none  &none            &none      &none      &none              &none
&none  &none       &none            &none         &none                         &kp BACKSPACE  &kp DELETE  &none      &none  &none  &none                 &none            &none      &none      &none              &none
            >;
        };

        Mac_Fn {
            bindings = <
&none  &none             &none     &none      &none       &none  &none                                                 &none          &none  &kp F7  &kp F8  &kp F9  &kp F12  &kp INSERT
&none  &none             &none     &none      &none       &none  &none                                                 &none          &none  &kp F4  &kp F5  &kp F6  &kp F11  &kp DELETE
&none  &kp LEFT_COMMAND  &kp LALT  &kp LCTRL  &kp LSHIFT  &none  &none  &none  &none      &kp LG(LS(NUMBER_4))  &none  &none          &none  &kp F1  &kp F2  &kp F3  &kp F10  &kp PRINTSCREEN
&none  &none             &none     &none      &none       &none                &none      &none                                       &none  &none   &none   &none   &none    &kp SCROLLLOCK
&none  &none             &none     &none      &none              &none  &none  &none      &none                 &none  &kp LG(SPACE)         &none   &none   &none   &none    &kp PAUSE_BREAK
            >;
        };

        WinBase {
            bindings = <
&kp LA(LS(ESCAPE))  &kp N1        &kp N2       &kp N3           &kp N4                        &kp N5  &mo 9                                                                                      &mo 9           &kp N6  &kp N7          &kp N8            &kp N9       &kp N0                &kp LA(ESCAPE)
&kp TAB             &kp Q         &kp W        &kp E            &kp R                         &kp T   &none                                                                                      &trans          &kp Y   &kp U           &kp I             &kp O        &kp P                 &kp NON_US_BACKSLASH
&kp ESCAPE          &hml LCTRL A  &hml LWIN S  &hml LEFT_ALT D  &hmsl LSHIFT F                &kp G   &trans              &trans           &trans                      &trans         &trans     &trans          &kp H   &hmsr RSHIFT J  &hml RIGHT_ALT K  &hmr RWIN L  &hmr RCTRL SEMICOLON  &kp APOS
&kp LSHIFT          &kp Z         &kp X        &kp C            &kp V                         &kp B                                        &kp END                     &kp PAGE_UP                               &kp N   &kp M           &kp COMMA         &kp PERIOD   &kp SLASH             &kp RSHIFT
&w_select_all_none  &w_UndoRedo   &kp LC(X)    &kp LC(C)        &w_alt_tab_behaviour 0 LC(V)          &space 5 BACKSPACE  &space 7 DELETE  &layer_with_mod 8 LALT      &kp PAGE_DOWN  &kp ENTER  &space 6 SPACE          &kp LEFT        &kp DOWN          &kp UP       &kp RIGHT             &trans
            >;
        };

        WinSymbols {
            bindings = <
&kp BACKSLASH  &kp POUND         &kp LEFT_PARENTHESIS  &kp RIGHT_PARENTHESIS  &kp AT             &kp PERCENT  &trans                                                    &trans           &trans     &kp N7        &kp N8        &kp N9        &kp POUND        &kp BACKSLASH
&kp QUESTION   &kp LEFT_BRACE    &kp SINGLE_QUOTE      &kp DOUBLE_QUOTES      &kp RIGHT_BRACE    &kp MINUS    &kp PERCENT                                               &kp PERCENT      &kp MINUS  &kp NUMBER_4  &kp N5        &kp NUMBER_6  &kp RIGHT_BRACE  &kp QUESTION
&kp EXCL       &kp LEFT_BRACKET  &kp UNDER             &kp EQUAL              &kp RIGHT_BRACKET  &kp PLUS     &kp KP_MULTIPLY  &trans  &trans        &trans  &trans     &kp KP_MULTIPLY  &kp PLUS   &kp NUMBER_1  &kp NUMBER_2  &kp NUMBER_3  &kp SEMICOLON    &kp BACKSPACE
&kp COLON      &kp LESS_THAN     &kp PIPE              &kp AMPERSAND          &kp GREATER_THAN   &kp TILDE                             &kp HOME      &trans                              &kp TILDE  &kp N0        &kp COMMA     &kp PERIOD    &kp SLASH        &kp COLON
&kp GRAVE      &kp CARET         &kp AT                &kp SLASH              &kp DOLLAR                      &kp SPACE        &trans  &kp END       &trans  &kp ENTER  &kp SPACE                   &kp LEFT      &kp DOWN      &kp UP_ARROW  &kp RIGHT        &kp GRAVE
            >;
        };

        WinNavigation {
            bindings = <
&none  &none      &none            &none         &none        &none          &none                                          &none  &none  &none             &none             &none             &none             &none
&none  &none      &kp HOME         &kp UP_ARROW  &kp END      &kp PAGE_UP    &none                                          &none  &none  &kp RC(F)         &kp F3            &kp RS(F3)        &none             &none
&none  &none      &kp LEFT         &kp DOWN      &kp RIGHT    &kp PAGE_DOWN  &none          &none  &none      &none  &none  &none  &none  &kp RSHIFT        &kp RALT          &kp RGUI          &kp RCTRL         &none
&none  &kp LC(W)  &kp LS(LC(TAB))  &kp LC(L)     &kp LC(TAB)  &kp LC(T)                            &none      &none                &none  &kp LG(NUMBER_1)  &kp LG(NUMBER_2)  &kp LG(NUMBER_3)  &kp LG(NUMBER_4)  &none
&none  &none      &none            &none         &none                       &kp BACKSPACE  &none  &none      &none  &none  &none         &kp LG(N5)        &kp LG(NUMBER_6)  &kp LG(N7)        &kp LG(N8)        &none
            >;
        };

        WinFN {
            bindings = <
&none  &none      &none     &none     &none       &none  &none                                                         &none          &none  &kp F7            &kp F8            &kp F9            &kp F12  &kp INSERT
&none  &none      &none     &none     &none       &none  &none                                                         &none          &none  &kp F4            &kp F5            &kp F6            &kp F11  &kp DELETE
&none  &kp LCTRL  &kp LGUI  &kp LALT  &kp LSHIFT  &none  &none  &kp LG(LS(S))  &none      &kp LG(LS(NUMBER_4))  &none  &none          &none  &kp F1            &kp F2            &kp F3            &kp F10  &kp PRINTSCREEN
&none  &none      &none     &none     &none       &none                        &none      &none                                       &none  &kp LG(NUMBER_1)  &kp LG(NUMBER_2)  &kp LG(NUMBER_3)  &none    &kp SCROLLLOCK
&none  &none      &none     &none     &none              &none  &none          &none      &none                 &none  &kp LA(LS(S))         &kp LG(NUMBER_4)  &kp LG(N5)        &kp LG(NUMBER_6)  &none    &kp PAUSE_BREAK
            >;
        };

        shift_tab_tab {
            bindings = <
&none  &none  &none  &none  &none  &none  &none                                                &none    &none  &none  &none  &none  &none  &none
&none  &none  &none  &none  &none  &none  &none                                                &none    &none  &none  &none  &none  &none  &none
&none  &none  &none  &none  &none  &none  &none        &none    &none      &none  &none        &none    &none  &none  &none  &none  &none  &none
&none  &none  &none  &none  &none  &none                        &none      &none                        &none  &none  &none  &none  &none  &none
&none  &none  &none  &none  &none         &kp LS(TAB)  &kp TAB  &none      &none  &kp RS(TAB)  &kp TAB         &none  &none  &none  &none  &none
            >;
        };

        Mod {
            bindings = <
&none  &bt BT_SEL 0  &bt BT_SEL 1  &bt BT_SEL 2  &bt BT_SEL 3  &bt BT_SEL 4  &none                                                  &trans                  &none  &none                 &none                 &none       &none  &none
&none  &none         &none         &none         &none         &none         &bootloader                                            &bootloader             &none  &kp C_BRIGHTNESS_DEC  &kp C_BRIGHTNESS_INC  &none       &none  &none
&none  &none         &none         &none         &none         &none         &none        &none  &none      &bt BT_CLR  &none       &rgb_ug RGB_MEFS_CMD 5  &none  &kp K_PREV            &kp K_PLAY_PAUSE      &kp K_NEXT  &none  &none
&none  &none         &none         &none         &macro_ver    &none                             &none      &none                                           &none  &kp C_VOLUME_DOWN     &kp C_VOLUME_UP       &kp K_MUTE  &none  &none
&none  &none         &none         &none         &none                       &to 0        &to 4  &none      &none       &bl BL_TOG  &rgb_ug RGB_TOG                &bl BL_INC            &bl BL_DEC            &none       &none  &none
            >;
        };
    };
};
