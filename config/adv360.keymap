/*
 * Copyright (c) 2020 The ZMK Contributors
 *
 * SPDX-License-Identifier: MIT
 */
/* THIS FILE WAS GENERATED!
 *
 * This file was generated automatically. You may or may not want to
 * edit it directly.
 */

#include <behaviors.dtsi>
#include <dt-bindings/zmk/backlight.h>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/rgb.h>

&caps_word { continue-list = <UNDERSCORE BACKSPACE DELETE NUMBER_1 NUMBER_2 NUMBER_3 NUMBER_4 NUMBER_5 NUMBER_6 NUMBER_7 NUMBER_8 NUMBER_9 NUMBER_0 MINUS KP_MINUS>; };

&sl {
    ignore-modifiers;
    release-after-ms = <3000>;
};

&sk {
    quick-release;
    release-after-ms = <3000>;
};

/ {
    behaviors {
        #include "macros.dtsi"
    #include "version.dtsi"

        hml: hml {
            compatible = "zmk,behavior-hold-tap";
            label = "hmk";
            #binding-cells = <2>;
            tapping-term-ms = <500>;
            flavor = "balanced";
            bindings = <&kp>, <&kp>;

            quick-tap-ms = <175>;
            hold-trigger-key-positions = <7 8 9 10 11 12 13 21 22 23 24 25 26 27 38 39 40 41 42 43 44 45 54 55 56 57 58 59 71 72 73 74 75 37 38 39 40 41 42 43 44 53 54 55 56 57 58 68 69 70 71 72 73 74 35 36 37 38 52 53 65 66 67 68 69 70 71 72 73>;
            require-prior-idle-ms = <150>;
            hold-trigger-on-release;
        };

        hmr: hmr {
            compatible = "zmk,behavior-hold-tap";
            label = "HMR";
            #binding-cells = <2>;
            tapping-term-ms = <500>;
            flavor = "balanced";
            bindings = <&kp>, <&kp>;

            quick-tap-ms = <175>;
            require-prior-idle-ms = <150>;
            hold-trigger-on-release;
            hold-trigger-key-positions = <0 1 2 3 4 5 6 14 15 16 17 18 19 20 28 29 30 31 32 33 34 35 36 46 47 48 49 50 51 52 60 61 62 63 64 65 66 67 37 38 53 68 69 70>;
        };

        hmsl: hmsl {
            compatible = "zmk,behavior-hold-tap";
            label = "HMSL";
            bindings = <&kp>, <&kp>;

            #binding-cells = <2>;
            hold-trigger-key-positions = <7 8 9 10 11 12 13 21 22 23 24 25 26 27 37 38 39 40 41 42 43 44 45 53 54 55 56 57 58 59 68 69 70 71 72 73 74 75 35 36 37 38 52 53 65 66 67 68 69>;
            flavor = "tap-preferred";
            tapping-term-ms = <110>;
            quick-tap-ms = <300>;
            require-prior-idle-ms = <80>;
        };

        hmsr: hmsr {
            compatible = "zmk,behavior-hold-tap";
            label = "HMSR";
            bindings = <&kp>, <&kp>;

            #binding-cells = <2>;
            flavor = "tap-preferred";
            tapping-term-ms = <110>;
            quick-tap-ms = <300>;
            require-prior-idle-ms = <80>;
            hold-trigger-key-positions = <0 1 2 3 4 5 6 14 15 16 17 18 19 20 28 29 30 31 32 33 34 35 36 46 47 48 49 50 51 52 60 61 62 63 64 65 66 67 37 38 53 68 69 70>;
        };

        space: space {
            compatible = "zmk,behavior-hold-tap";
            label = "SPACE";
            bindings = <&mo>, <&kp>;

            #binding-cells = <2>;
            flavor = "balanced";
            tapping-term-ms = <200>;
        };

        M_UndoRedo: M_UndoRedo {
            compatible = "zmk,behavior-mod-morph";
            label = "M_UNDOREDO";
            bindings = <&kp LG(Z)>, <&kp LS(LG(Z))>;

            #binding-cells = <0>;
            mods = <(MOD_RSFT)>;
        };

        w_UndoRedo: w_UndoRedo {
            compatible = "zmk,behavior-mod-morph";
            label = "W_UNDOREDO";
            bindings = <&kp LC(Z)>, <&kp LS(LC(Z))>;

            #binding-cells = <0>;
            mods = <(MOD_RSFT)>;
        };

        w_select_all_none: w_select_all_none {
            compatible = "zmk,behavior-mod-morph";
            label = "W_SELECT_ALL_NONE";
            bindings = <&kp LA(A)>, <&select_none>;

            #binding-cells = <0>;
            mods = <(MOD_RSFT)>;
        };

        w_alt_tab_behaviour: w_alt_tab_behaviour {
            compatible = "zmk,behavior-hold-tap";
            label = "W_ALT_TAB_BEHAVIOUR";
            bindings = <&w_alt_tab_layer>, <&kp>;

            #binding-cells = <2>;
            tapping-term-ms = <150>;
            flavor = "hold-preferred";
        };

        m_alt_tab_behaviour: m_alt_tab_behaviour {
            compatible = "zmk,behavior-hold-tap";
            label = "M_ALT_TAB_BEHAVIOUR";
            bindings = <&m_alt_tab_layer>, <&kp>;

            #binding-cells = <2>;
            tapping-term-ms = <150>;
            flavor = "balanced";
        };

        thumb: thumb {
            compatible = "zmk,behavior-hold-tap";
            label = "THUMB";
            bindings = <&mo>, <&kp>;

            #binding-cells = <2>;
            tapping-term-ms = <200>;
        };

        m_select_word_mod: m_select_word_mod {
            compatible = "zmk,behavior-mod-morph";
            label = "M_SELECT_WORD_MOD";
            bindings = <&m_select_word_right>, <&m_select_word_left>;

            #binding-cells = <0>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
        };

        w_select_word_mod: w_select_word_mod {
            compatible = "zmk,behavior-mod-morph";
            label = "W_SELECT_WORD_MOD";
            bindings = <&w_select_word_right>, <&w_select_word_left>;

            #binding-cells = <0>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
        };

        w_select_line_all: w_select_line_all {
            compatible = "zmk,behavior-tap-dance";
            label = "W_SELECT_LINE_ALL";
            #binding-cells = <0>;
            bindings = <&w_select_line>, <&kp LC(A)>;
        };

        m_select_line_all: m_select_line_all {
            compatible = "zmk,behavior-tap-dance";
            label = "M_SELECT_LINE_ALL";
            #binding-cells = <0>;
            bindings = <&m_select_line>, <&kp LG(A)>;
        };

        thumb_mod: thumb_mod {
            compatible = "zmk,behavior-hold-tap";
            label = "THUMB_MOD";
            bindings = <&kp>, <&kp>;

            #binding-cells = <2>;
            tapping-term-ms = <200>;
        };

        m_nav_to_sym_macro_behavior: m_nav_to_sym_macro_behavior {
            compatible = "zmk,behavior-hold-tap";
            label = "M_NAV_TO_SYM_MACRO_BEHAVIOR";
            bindings = <&m_from_nav_to_sym>, <&kp>;

            #binding-cells = <2>;
            tapping-term-ms = <200>;
        };

        w_nav_to_sym_macro_behavior: w_nav_to_sym_macro_behavior {
            compatible = "zmk,behavior-hold-tap";
            label = "W_NAV_TO_SYM_MACRO_BEHAVIOR";
            bindings = <&w_from_nav_to_sym>, <&kp>;

            #binding-cells = <2>;
            tapping-term-ms = <200>;
        };

        thumb_kp_sticky_key: thumb_kp_sticky_key {
            compatible = "zmk,behavior-hold-tap";
            label = "THUMB_KP_STICKY_KEY";
            bindings = <&kp>, <&sk>;

            #binding-cells = <2>;
            tapping-term-ms = <200>;
        };
    };

    combos {
        compatible = "zmk,combos";

        Win_Base_Prev_Word {
            bindings = <&kp LC(LEFT)>;
            key-positions = <71 72>;
            layers = <6>;
            timeout-ms = <50>;
        };

        Win_Base_Next_Word {
            bindings = <&kp RC(RIGHT)>;
            key-positions = <73 74>;
            layers = <6>;
            timeout-ms = <50>;
        };

        Win_Nav_Prev_Word {
            bindings = <&kp LC(LEFT)>;
            key-positions = <30 31>;
            layers = <10>;
            timeout-ms = <50>;
        };

        Win_Nav_Next_Word {
            bindings = <&kp RC(RIGHT)>;
            key-positions = <31 32>;
            layers = <10>;
            timeout-ms = <50>;
        };

        Mac_Base_Prev_Word {
            bindings = <&kp LA(LEFT)>;
            key-positions = <71 72>;
            timeout-ms = <50>;
            layers = <0 3>;
        };

        Mac_Base_Next_Word {
            bindings = <&kp RA(RIGHT)>;
            key-positions = <73 74>;
            timeout-ms = <50>;
            layers = <0 3>;
        };

        Mac_Nav_Pev_Word {
            bindings = <&kp LA(LEFT)>;
            key-positions = <30 31>;
            timeout-ms = <50>;
            layers = <4>;
        };

        Mac_Nav_Next_Word {
            bindings = <&kp RA(RIGHT)>;
            key-positions = <31 32>;
            timeout-ms = <50>;
            layers = <4>;
        };

        m_paste_plain {
            bindings = <&kp LG(LS(V))>;
            key-positions = <63 64>;
            timeout-ms = <50>;
            layers = <0 4>;
        };

        m_redo {
            bindings = <&kp LG(LS(Z))>;
            key-positions = <61 62>;
            timeout-ms = <50>;
            layers = <0 4>;
        };

        m_lock {
            bindings = <&kp LC(LG(Q))>;
            key-positions = <0 13>;
            timeout-ms = <50>;
            layers = <0>;
        };

        m_select_word_base {
            bindings = <&m_select_word_mod>;
            key-positions = <72 73>;
            layers = <0 3>;
            timeout-ms = <50>;
        };

        m_select_word_nav {
            bindings = <&m_select_word_mod>;
            key-positions = <30 32>;
            timeout-ms = <50>;
            layers = <4>;
        };

        m_delete_word_backward {
            bindings = <&kp LA(BACKSPACE)>;
            key-positions = <65 32 31>;
            timeout-ms = <50>;
            layers = <0 4>;
            require-prior-idle-ms = <(-1)>;
        };

        m_delete_word_forward {
            bindings = <&kp LA(DELETE)>;
            key-positions = <66 32 31>;
            timeout-ms = <50>;
            layers = <0 4>;
            require-prior-idle-ms = <(-1)>;
        };

        m_delete_line {
            bindings = <&m_delete_line>;
            key-positions = <65 31 30>;
            timeout-ms = <50>;
            layers = <0 4>;
            require-prior-idle-ms = <(-1)>;
        };

        w_paste_plain {
            bindings = <&kp LC(LA(LG(V)))>;
            key-positions = <63 64>;
            timeout-ms = <50>;
            layers = <6 10>;
        };

        w_redo {
            bindings = <&kp LC(Y)>;
            key-positions = <61 62>;
            timeout-ms = <50>;
            layers = <6 10>;
        };

        w_select_word_base {
            bindings = <&w_select_word_mod>;
            key-positions = <72 73>;
            timeout-ms = <50>;
            layers = <6 9>;
        };

        w_select_word_nav {
            bindings = <&w_select_word_mod>;
            key-positions = <30 32>;
            timeout-ms = <50>;
            layers = <10>;
        };

        w_delete_word_backward {
            bindings = <&kp LC(BACKSPACE)>;
            key-positions = <65 32 31>;
            timeout-ms = <50>;
            layers = <6 10>;
            require-prior-idle-ms = <(-1)>;
        };

        w_delete_word_forward {
            bindings = <&kp LC(DELETE)>;
            key-positions = <66 32 31>;
            timeout-ms = <50>;
            layers = <6 10>;
            require-prior-idle-ms = <(-1)>;
        };

        m_next_lang {
            bindings = <&m_next_lang>;
            key-positions = <60 61>;
            timeout-ms = <50>;
            layers = <0>;
        };

        w_next_lang {
            bindings = <&kp LS(LALT)>;
            key-positions = <60 61>;
            timeout-ms = <50>;
            layers = <6>;
        };

        w_delete_line_easy {
            bindings = <&w_delete_line>;
            key-positions = <65 31 30>;
            timeout-ms = <50>;
            layers = <6 10>;
            require-prior-idle-ms = <(-1)>;
        };

        backspace_repeat {
            bindings = <&backspace_repeat>;
            key-positions = <65 46>;
            layers = <0 4 6 10>;
            timeout-ms = <50>;
        };

        delete_repeat {
            bindings = <&delete_repeat>;
            key-positions = <66 46>;
            timeout-ms = <50>;
            layers = <0 4 6 10>;
        };

        whitespace_repeat {
            bindings = <&whitespace_repeat>;
            key-positions = <59 70>;
            layers = <0 3 6 10>;
        };

        enter_repeat {
            bindings = <&enter_repeat>;
            key-positions = <59 69>;
            layers = <0 4 6 10>;
        };

        esc_combo {
            bindings = <&kp ESC>;
            key-positions = <15 16>;
            layers = <0 2 4 6 8 10 1 7>;
            timeout-ms = <50>;
            require-prior-idle-ms = <50>;
        };

        m_ctrl_space {
            bindings = <&kp LC(SPACE)>;
            key-positions = <29 70>;
            layers = <0 4>;
            timeout-ms = <50>;
        };

        m_command_space {
            bindings = <&kp LG(SPACE)>;
            key-positions = <32 70>;
            timeout-ms = <50>;
            layers = <0 4>;
        };

        w_ctrl_space {
            bindings = <&kp LC(SPACE)>;
            key-positions = <32 70>;
            timeout-ms = <50>;
            layers = <6 10>;
        };

        m_lalt_lgui_space {
            bindings = <&kp LG(LA(SPACE))>;
            key-positions = <32 30 70>;
            timeout-ms = <50>;
            layers = <0 4>;
        };

        m_lshift_lgui_enter {
            bindings = <&kp LG(LS(ENTER))>;
            key-positions = <32 31 69>;
            timeout-ms = <50>;
            layers = <0 4>;
        };

        w_lshift_lctrl_enter {
            bindings = <&kp LC(LS(ENTER))>;
            key-positions = <32 31 69>;
            timeout-ms = <70>;
            layers = <6 10>;
        };

        cappy {
            bindings = <&caps_word>;
            key-positions = <46 59>;
            timeout-ms = <70>;
            layers = <0 6>;
        };

        sticky_shift {
            bindings = <&sk LSHIFT>;
            key-positions = <31 42>;
            timeout-ms = <50>;
            layers = <0 6>;
            require-prior-idle-ms = <1>;
        };

        m_alt_tab {
            bindings = <&m_alt_tab_layer>;
            key-positions = <47 48>;
            timeout-ms = <50>;
            layers = <0 4>;
        };

        w_alt_tab {
            bindings = <&w_alt_tab_layer>;
            key-positions = <47 48>;
            timeout-ms = <50>;
            layers = <6 10>;
        };
    };

    macros {
        select_none: select_none {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp DOWN &kp UP_ARROW &kp RIGHT &kp LEFT>;
            label = "SELECT_NONE";
            wait-ms = <1>;
        };

        layer_with_mod: w_alt_tab {
            compatible = "zmk,behavior-macro-two-param";
            #binding-cells = <2>;
            bindings =
                <&macro_param_1to1>,
                <&macro_press>,
                <&mo MACRO_PLACEHOLDER &macro_param_2to1>,
                <&macro_press>,
                <&kp MACRO_PLACEHOLDER>,
                <&macro_pause_for_release>,
                <&macro_param_2to1>,
                <&macro_release>,
                <&kp MACRO_PLACEHOLDER &macro_param_1to1>,
                <&macro_release>,
                <&mo MACRO_PLACEHOLDER>;

            label = "W_ALT_TAB";
        };

        w_alt_tab_layer: test {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings =
                <&macro_press>,
                <&mo 12>,
                <&macro_press>,
                <&kp LEFT_ALT>,
                <&macro_pause_for_release>,
                <&macro_release>,
                <&kp LEFT_ALT>,
                <&macro_release>,
                <&mo 12>;

            label = "TEST";
        };

        m_alt_tab_layer: m_alt_tab {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings =
                <&macro_press>,
                <&mo 12>,
                <&macro_press>,
                <&kp LGUI>,
                <&macro_pause_for_release>,
                <&macro_release>,
                <&kp LGUI>,
                <&macro_release>,
                <&mo 12>;

            label = "M_ALT_TAB";
        };

        m_extend_word_left: m_extend_word {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp LS(LA(LEFT))>;
            label = "M_EXTEND_WORD";
        };

        m_extend_word_right: m_extend_word_right {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp LA(LS(RIGHT))>;
            label = "M_EXTEND_WORD_RIGHT";
        };

        w_extend_word_left: w_extend_word_left {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp LS(LC(LEFT))>;
            label = "W_EXTEND_WORD_LEFT";
        };

        w_extend_word_right: w_extend_word_right {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp LC(LS(RIGHT))>;
            label = "W_EXTEND_WORD_RIGHT";
        };

        m_extend_line_left: m_extend_line_left {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp LS(UP_ARROW) &kp LS(LG(LEFT))>;
            label = "M_EXTEND_LINE_LEFT";
        };

        m_extend_line_right: m_extend_line_right {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp LS(DOWN) &kp LS(LG(RIGHT))>;
            label = "M_EXTEND_LINE_RIGHT";
        };

        w_extend_line_left: w_extend_line_left {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp LS(UP_ARROW) &kp LS(HOME)>;
            label = "W_EXTEND_LINE_LEFT";
        };

        w_extend_line_right: w_extend_line_right {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp LS(DOWN) &kp LS(END)>;
            label = "W_EXTEND_LINE_RIGHT";
        };

        m_select_line: m_select_line {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp LG(LEFT) &kp LG(LS(RIGHT))>;
            label = "M_SELECT_LINE";
        };

        w_select_line: w_select_line {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp HOME &kp LS(END)>;
            label = "W_SELECT_LINE";
        };

        m_select_word_left: m_select_word_left {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp LA(LEFT) &kp LA(RIGHT) &kp LS(LA(LEFT))>;
            label = "M_SELECT_WORD_LEFT";
        };

        m_select_word_right: m_select_word_right {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp LA(RIGHT) &kp LA(LEFT) &kp LA(LS(RIGHT))>;
            label = "M_SELECT_WORD_RIGHT";
        };

        w_select_word_left: w_select_word_left {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp LC(LEFT) &kp LC(RIGHT) &kp LC(LS(LEFT))>;
            label = "W_SELECT_WORD_LEFT";
        };

        w_select_word_right: w_select_word_right {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp LC(RIGHT) &kp LC(LEFT) &kp LC(LS(RIGHT))>;
            label = "W_SELECT_WORD_RIGHT";
        };

        m_delete_line: m_delete_line {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp LG(LEFT) &kp LG(DELETE)>;
            label = "M_DELETE_LINE";
        };

        w_delete_line: w_delete_line {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp HOME &kp LS(END) &kp BACKSPACE>;
            label = "W_DELETE_LINE";
        };

        m_bt_profile: m_bt_profile {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&to 0 &bt BT_SEL 0>;
            label = "M_BT_PROFILE";
        };

        w_bt_profile: w_bt_profile {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&to 6 &bt BT_SEL 1>;
            label = "W_BT_PROFILE";
        };

        m_next_lang: m_next_lang {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp LCTRL &kp LALT &kp SPACE>;
            label = "M_NEXT_LANG";
        };

        m_from_nav_to_sym: m_from_nav_to_sym {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings =
                <&macro_release>,
                <&mo 4>,
                <&macro_press>,
                <&mo 3>,
                <&macro_pause_for_release>,
                <&macro_release>,
                <&mo 3>,
                <&macro_press>,
                <&mo 4>;

            label = "M_FROM_NAV_TO_SYM";
            wait-ms = <5>;
        };

        backspace_repeat: backspace_repeat {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings =
                <&macro_press>,
                <&kp BACKSPACE &key_repeat>,
                <&macro_pause_for_release>,
                <&macro_release>,
                <&kp BACKSPACE>;

            label = "BACKSPACE_REPEAT";
        };

        delete_repeat: delete_repeat {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings =
                <&macro_press>,
                <&kp DELETE &key_repeat>,
                <&macro_pause_for_release>,
                <&macro_release>,
                <&kp DELETE>;

            label = "DELETE_REPEAT";
        };

        enter_repeat: enter_repeat {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings =
                <&macro_press>,
                <&kp ENTER &key_repeat>,
                <&macro_pause_for_release>,
                <&macro_release>,
                <&kp ENTER>;

            label = "ENTER_REPEAT";
        };

        whitespace_repeat: whitespace_repeat {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings =
                <&macro_press>,
                <&kp SPACE &key_repeat>,
                <&macro_pause_for_release>,
                <&macro_release>,
                <&kp SPACE>;

            label = "WHITESPACE_REPEAT";
        };

        w_from_nav_to_sym: w_from_nav_to_sym {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings =
                <&macro_release>,
                <&mo 10>,
                <&macro_press>,
                <&mo 9>,
                <&macro_pause_for_release>,
                <&macro_release>,
                <&mo 9>,
                <&macro_press>,
                <&mo 10>;

            label = "W_FROM_NAV_TO_SYM";
            wait-ms = <5>;
        };
    };

    keymap {
        compatible = "zmk,keymap";

        MacBase {
            bindings = <
&kp ESCAPE                          &kp N1     &kp N2     &kp N3     &kp N4     &kp N5  &mo 15                                                                                                                                                      &mo 15                &kp N6  &kp N7    &kp N8     &kp N9        &kp N0         &kp MINUS
&kp TAB                             &kp Q      &kp W      &kp E      &kp R      &kp T   &none                                                                                                                                                       &kp F23               &kp Y   &kp U     &kp I      &kp O         &kp P          &kp BACKSLASH
&sl 1                               &kp A      &kp S      &kp D      &kp F      &kp G   &kp LS(LA(LC(LGUI)))  &thumb_kp_sticky_key LGUI LGUI  &thumb_kp_sticky_key LCTRL LCTRL      &thumb_kp_sticky_key RALT RALT  &thumb_kp_sticky_key RGUI RGUI  &kp RS(RA(RC(RGUI)))  &kp H   &kp J     &kp K      &kp L         &kp SEMICOLON  &sl 2
&thumb_kp_sticky_key LSHIFT LSHIFT  &kp Z      &kp X      &kp C      &kp V      &kp B                                                         &kp HOME                              &kp PG_UP                                                                             &kp N   &kp M     &kp COMMA  &kp DOT       &kp FSLH       &thumb_kp_sticky_key RSHIFT RSHIFT
&layer_with_mod 12 LGUI             &kp LG(Z)  &kp LG(X)  &kp LG(C)  &kp LG(V)          &thumb 3 BACKSPACE    &thumb 5 DELETE                 &kp END                               &kp PG_DN                       &thumb_mod RSHIFT ENTER         &space 4 SPACE                &kp LEFT  &kp DOWN   &kp UP_ARROW  &kp RIGHT      &caps_word
            >;
        };

        MacModL {
            bindings = <
&kp ESCAPE  &kp N1     &kp N2    &kp N3     &kp N4    &kp N5  &none                                              &none      &kp N6  &kp N7    &kp N8     &kp N9        &kp N0     &none
&kp TAB     &kp Q      &kp W     &kp E      &kp R     &kp T   &none                                              &none      &kp Y   &kp U     &kp I      &kp O         &kp P      &none
&none       &sk LCTRL  &sk LALT  &sk LSHFT  &sk LGUI  &kp G   &none     &none       &none      &none  &none      &none      &kp H   &kp J     &kp K      &kp L         &kp SEMI   &none
&none       &kp Z      &kp X     &kp C      &kp V     &kp B                         &none      &none                        &kp N   &kp M     &kp COMMA  &kp DOT       &kp FSLH   &none
&none       &none      &none     &none      &none             &kp BSPC  &kp DELETE  &none      &none  &kp ENTER  &kp SPACE          &kp LEFT  &kp DOWN   &kp UP_ARROW  &kp RIGHT  &none
            >;
        };

        MacModeR {
            bindings = <
&kp ESCAPE  &kp N1  &kp N2  &kp N3  &kp N4  &kp N5  &none                                              &none      &kp N6  &kp N7    &kp N8      &kp N9        &kp N0     &none
&kp TAB     &kp Q   &kp W   &kp E   &kp R   &kp T   &none                                              &none      &kp Y   &kp U     &kp I       &kp O         &kp P      &none
&none       &kp A   &kp S   &kp D   &kp F   &kp G   &none     &none       &none      &none  &none      &none      &kp H   &sk RGUI  &sk RSHIFT  &sk RALT      &sk RCTRL  &none
&none       &kp Z   &kp X   &kp C   &kp V   &kp B                         &none      &none                        &kp N   &kp M     &kp COMMA   &kp DOT       &kp FSLH   &none
&none       &none   &none   &none   &none           &kp BSPC  &kp DELETE  &none      &none  &kp ENTER  &kp SPACE          &kp LEFT  &kp DOWN    &kp UP_ARROW  &kp RIGHT  &none
            >;
        };

        MacSymbols {
            bindings = <
&kp GRAVE        &kp BACKSLASH     &kp LEFT_PARENTHESIS  &kp RIGHT_PARENTHESIS   &kp SEMICOLON     &kp COMMA      &none                                                    &none           &none  &none               &none           &none               &none                 &kp BACKSLASH
&kp EXCLAMATION  &kp LEFT_BRACE    &kp SINGLE_QUOTE      &kp DOUBLE_QUOTES       &kp RIGHT_BRACE   &kp QUESTION   &kp AT                                                   &none           &none  &kp N7              &kp N8          &kp N9              &none                 &kp TAB
&kp POUND        &hml LCTRL CARET  &hml LALT EQUAL       &hml LSHIFT UNDERSCORE  &hml LGUI DOLLAR  &kp STAR       &kp PERCENT  &none  &none      &kp BACKSLASH  &kp N0     &none           &none  &hmr RGUI NUMBER_4  &hmr RSHIFT N5  &hmr RALT NUMBER_6  &hmr RCTRL SEMICOLON  &kp BACKSPACE
&kp COLON        &kp LESS_THAN     &kp PIPE              &kp MINUS               &kp GREATER_THAN  &kp KP_DIVIDE                      &none      &kp DOT                                   &none  &kp NUMBER_1        &kp NUMBER_2    &kp NUMBER_3        &kp SLASH             &none
&kp TILDE        &kp AMPERSAND     &kp LEFT_BRACKET      &kp RIGHT_BRACKET       &kp PLUS                         &trans       &none  &none      &kp COMMA      &kp ENTER  &space 4 SPACE         &kp LEFT            &kp DOWN        &kp UP_ARROW        &kp RIGHT             &none
            >;
        };

        MacNavigation {
            bindings = <
&to 0      &none               &none         &none         &none          &none          &none                                                                          &none           &none  &none          &none       &none          &none      &none
&none      &none               &kp LG(LEFT)  &kp UP_ARROW  &kp RG(RIGHT)  &kp PAGE_UP    &none                                                                          &none           &none  &kp RG(RS(G))  &kp RG(F)   &kp RG(G)      &none      &none
&none      &m_select_line_all  &kp LEFT      &kp DOWN      &kp RIGHT      &kp PAGE_DOWN  &kp LC(LEFT)                              &none       &none      &none  &none  &kp RC(RIGHT)   &none  &kp RALT       &kp RSHIFT  &kp RIGHT_GUI  &kp RCTRL  &kp ENTER
&kp LG(W)  &kp LC(LS(TAB))     &kp LG(L)     &kp LG(T)     &kp LC(TAB)    &none                                                                &none      &none                         &none  &none          &none       &none          &none      &none
&none      &kp LG(Z)           &kp LG(X)     &kp LG(C)     &kp LG(V)                     &m_nav_to_sym_macro_behavior 0 BACKSPACE  &kp DELETE  &none      &none  &none  &space 4 SPACE         &none          &none       &none          &none      &none
            >;
        };

        Mac_Fn {
            bindings = <
&none  &kp C_BRIGHTNESS_DEC  &kp C_BRIGHTNESS_INC  &kp C_PREVIOUS  &kp C_PLAY_PAUSE  &kp C_NEXT  &none                                                     &none          &none  &kp C_MUTE  &kp C_VOLUME_DOWN  &kp C_VOLUME_UP  &kp F12  &kp INSERT
&none  &none                 &none                 &none           &none             &none       &none                                                     &none          &none  &kp F7      &kp F8             &kp F9           &kp F12  &kp DELETE
&none  &kp LCTRL             &kp LALT              &kp LSHIFT      &kp LGUI          &none       &kp ENTER  &none  &none      &kp LG(LS(NUMBER_4))  &none  &none          &none  &kp F4      &kp F5             &kp F6           &kp F11  &kp PRINTSCREEN
&none  &none                 &none                 &none           &none             &none                         &none      &none                                       &none  &kp F1      &kp F2             &kp F3           &kp F10  &kp SCROLLLOCK
&none  &none                 &none                 &none           &none                         &none      &none  &none      &none                 &none  &kp LG(SPACE)         &none       &none              &none            &none    &kp PAUSE_BREAK
            >;
        };

        WinBase {
            bindings = <
&kp ESCAPE                          &kp N1     &kp N2     &kp N3     &kp N4     &kp N5  &mo 15                                                                                                                                       &mo 15                 &kp N6  &kp N7    &kp N8     &kp N9      &kp N0         &kp MINUS
&kp TAB                             &kp Q      &kp W      &kp E      &kp R      &kp T   &none                                                                                                                                        &none                  &kp Y   &kp U     &kp I      &kp O       &kp P          &kp NON_US_BACKSLASH
&sl 7                               &kp A      &kp S      &kp D      &kp F      &kp G   &kp LS(LA(LG(RCTRL)))  &thumb_kp_sticky_key LCTRL LCTRL  &kp LEFT_WIN      &thumb_kp_sticky_key RALT RALT  &thumb_kp_sticky_key RCTRL RCTRL  &kp RS(RA(RG(RCTRL)))  &kp H   &kp J     &kp K      &kp L       &kp SEMICOLON  &sl 8
&thumb_kp_sticky_key LSHIFT LSHIFT  &kp Z      &kp X      &kp C      &kp V      &kp B                                                            &kp HOME          &kp PAGE_UP                                                                              &kp N   &kp M     &kp COMMA  &kp PERIOD  &kp SLASH      &thumb_kp_sticky_key RSHIFT RSHIFT
&layer_with_mod 12 LALT             &kp LC(Z)  &kp LC(X)  &kp LC(C)  &kp LC(V)          &thumb 9 BACKSPACE     &thumb 11 DELETE                  &kp END           &kp PAGE_DOWN                   &thumb_mod RSHIFT ENTER           &space 10 SPACE                &kp LEFT  &kp DOWN   &kp UP      &kp RIGHT      &layer_with_mod 12 RALT
            >;
        };

        WinModeL {
            bindings = <
&kp ESCAPE  &kp N1    &kp N2    &kp N3     &kp N4     &kp N5  &none                                              &none      &kp N6  &kp N7    &kp N8     &kp N9        &kp N0     &none
&kp TAB     &kp Q     &kp W     &kp E      &kp R      &kp T   &none                                              &none      &kp Y   &kp U     &kp I      &kp O         &kp P      &none
&none       &sk LGUI  &sk LALT  &sk LSHFT  &sk LCTRL  &kp G   &none     &none       &none      &none  &none      &none      &kp H   &kp J     &kp K      &kp L         &kp SEMI   &none
&none       &kp Z     &kp X     &kp C      &kp V      &kp B                         &none      &none                        &kp N   &kp M     &kp COMMA  &kp DOT       &kp FSLH   &none
&none       &none     &none     &none      &none              &kp BSPC  &kp DELETE  &none      &none  &kp ENTER  &kp SPACE          &kp LEFT  &kp DOWN   &kp UP_ARROW  &kp RIGHT  &none
            >;
        };

        WinModeR {
            bindings = <
&kp ESCAPE  &kp N1  &kp N2  &kp N3  &kp N4  &kp N5  &none                                              &none      &kp N6  &kp N7     &kp N8      &kp N9        &kp N0     &none
&kp TAB     &kp Q   &kp W   &kp E   &kp R   &kp T   &none                                              &none      &kp Y   &kp U      &kp I       &kp O         &kp P      &none
&none       &kp A   &kp S   &kp D   &kp F   &kp G   &none     &none       &none      &none  &none      &none      &kp H   &sk RCTRL  &sk RSHIFT  &sk RALT      &sk RGUI   &none
&none       &kp Z   &kp X   &kp C   &kp V   &kp B                         &none      &none                        &kp N   &kp M      &kp COMMA   &kp DOT       &kp FSLH   &none
&none       &none   &none   &none   &none           &kp BSPC  &kp DELETE  &none      &none  &kp ENTER  &kp SPACE          &kp LEFT   &kp DOWN    &kp UP_ARROW  &kp RIGHT  &none
            >;
        };

        WinSymbols {
            bindings = <
&kp GRAVE  &kp BACKSLASH    &kp LEFT_PARENTHESIS  &kp RIGHT_PARENTHESIS   &kp SEMICOLON      &kp COMMA     &none                                                        &none            &none  &none                &none           &none               &none                 &kp BACKSLASH
&kp EXCL   &kp LEFT_BRACE   &kp SINGLE_QUOTE      &kp DOUBLE_QUOTES       &kp RIGHT_BRACE    &kp QUESTION  &kp AT                                                       &none            &none  &kp N7               &kp N8          &kp N9              &none                 &kp TAB
&kp HASH   &hml LGUI CARET  &hml LALT EQUAL       &hml LSHIFT UNDERSCORE  &hml LCTRL DOLLAR  &kp ASTERISK  &kp PERCENT  &trans  &trans        &kp BACKSLASH  &kp N0     &none            &none  &hmr RCTRL NUMBER_4  &hmr RSHIFT N5  &hmr RALT NUMBER_6  &hmr RCTRL SEMICOLON  &kp BACKSPACE
&kp COLON  &kp LESS_THAN    &kp PIPE              &kp MINUS               &kp GREATER_THAN   &kp SLASH                          &kp HOME      &kp DOT                                    &none  &kp NUMBER_1         &kp NUMBER_2    &kp NUMBER_3        &kp SLASH             &none
&kp TILDE  &kp AMPERSAND    &kp LEFT_BRACKET      &kp RIGHT_BRACKET       &kp KP_PLUS                      &kp SPACE    &trans  &kp END       &kp COMMA      &kp ENTER  &space 10 SPACE         &kp LEFT             &kp DOWN        &kp UP_ARROW        &kp RIGHT             &none
            >;
        };

        WinNavigation {
            bindings = <
&none      &none               &none      &none         &none        &none          &none                                                                          &none            &none  &none             &none             &none             &none             &none
&none      &none               &kp HOME   &kp UP_ARROW  &kp END      &kp PAGE_UP    &none                                                                          &none            &none  &kp RS(F3)        &kp RC(F)         &kp F3            &none             &none
&none      &w_select_line_all  &kp LEFT   &kp DOWN      &kp RIGHT    &kp PAGE_DOWN  &none                                     &none       &none      &none  &none  &none            &none  &kp RCTRL         &kp RSHIFT        &kp RALT          &kp RGUI          &kp ENTER
&kp LC(W)  &kp LC(LS(TAB))     &kp LC(L)  &kp LC(T)     &kp LC(TAB)  &none                                                                &none      &none                          &none  &kp LG(NUMBER_1)  &kp LG(NUMBER_2)  &kp LG(NUMBER_3)  &kp LG(NUMBER_4)  &none
&none      &kp LC(Z)           &kp LC(X)  &kp LC(C)     &kp LC(V)                   &w_nav_to_sym_macro_behavior 0 BACKSPACE  &kp DELETE  &none      &none  &none  &space 10 SPACE         &kp LG(N5)        &kp LG(NUMBER_6)  &kp LG(N7)        &kp LG(N8)        &none
            >;
        };

        WinFN {
            bindings = <
&none  &kp C_BRIGHTNESS_DEC  &kp C_BRIGHTNESS_INC  &kp C_PREVIOUS  &kp C_PLAY_PAUSE  &kp C_NEXT  &none                                      &none          &none  &kp C_MUTE  &kp C_VOLUME_DOWN  &kp C_VOLUME_UP  &none    &kp INSERT
&none  &none                 &none                 &none           &none             &none       &none                                      &none          &none  &kp F7      &kp F8             &kp F9           &kp F12  &kp DELETE
&none  &kp LEFT_GUI          &kp LALT              &kp LSHIFT      &kp LCTRL         &none       &kp ENTER  &none  &none      &none  &none  &none          &none  &kp F4      &kp F5             &kp F6           &kp F11  &kp PRINTSCREEN
&none  &none                 &none                 &none           &none             &none                         &none      &none                        &none  &kp F1      &kp F2             &kp F3           &kp F10  &kp SCROLLLOCK
&none  &none                 &none                 &none           &none                         &none      &none  &none      &none  &none  &kp LA(LS(S))         &none       &none              &none            &none    &kp PAUSE_BREAK
            >;
        };

        shift_tab_tab {
            bindings = <
&none  &none  &none  &none  &none  &none  &none                                                &none    &none  &none  &none  &none  &none  &none
&none  &none  &none  &none  &none  &none  &none                                                &none    &none  &none  &none  &none  &none  &none
&none  &none  &none  &none  &none  &none  &none        &none    &none      &none  &none        &none    &none  &none  &none  &none  &none  &none
&none  &none  &none  &none  &none  &none                        &none      &none                        &none  &none  &none  &none  &none  &none
&none  &none  &none  &none  &none         &kp LS(TAB)  &kp TAB  &none      &none  &kp RS(TAB)  &kp TAB         &none  &none  &none  &none  &none
            >;
        };

        WinGaming {
            bindings = <
&kp Y  &kp GRAVE   &kp NUMBER_1  &kp NUMBER_2  &kp NUMBER_3  &kp NUMBER_4  &kp N5                                              &mo 15         &kp NUMBER_6  &kp N7     &kp N8      &kp N9         &kp N0     &kp INSERT
&kp U  &kp TAB     &kp Q         &kp W         &kp E         &kp R         &kp T                                               &none          &kp Y         &kp U      &kp I       &kp O          &kp P      &kp DELETE
&kp J  &kp LSHIFT  &kp A         &kp S         &kp D         &kp F         &kp G      &kp ESCAPE  &kp I      &none  &kp N0     &none          &none         &kp RCTRL  &kp RSHIFT  &kp RIGHT_ALT  &kp RMETA  &kp PRINTSCREEN
&kp K  &kp H       &kp Z         &kp X         &kp C         &kp V                                &kp O      &none                            &kp N         &kp M      &kp COMMA   &kp DOT        &kp SLASH  &kp SCROLLLOCK
&kp L  &mo 14      &kp B         &kp N         &kp M                       &kp SPACE  &kp LCTRL   &kp P      &none  &kp ENTER  &kp BACKSPACE                &kp LEFT   &kp DOWN    &kp UP_ARROW   &kp RIGHT  &kp PAUSE_BREAK
            >;
        };

        WinGamingFN {
            bindings = <
&none  &none  &none    &none    &none    &none  &none                                  &none  &none  &none  &none  &none  &none  &none
&none  &none  &kp F10  &kp F11  &kp F12  &none  &none                                  &none  &none  &none  &none  &none  &none  &none
&none  &none  &kp F7   &kp F8   &kp F9   &none  &none  &none  &none      &none  &none  &none  &none  &none  &none  &none  &none  &none
&none  &none  &kp F4   &kp F5   &kp F6   &none                &none      &none                &none  &none  &none  &none  &none  &none
&none  &none  &kp F1   &kp F2   &kp F3          &none  &none  &none      &none  &none  &none         &none  &none  &none  &none  &none
            >;
        };

        Mod {
            bindings = <
&none  &bt BT_SEL 0  &bt BT_SEL 1  &bt BT_SEL 2  &bt BT_SEL 3  &bt BT_SEL 4  &none                                                                  &none                   &none  &none                 &none                 &none       &none  &none
&none  &none         &none         &none         &none         &none         &bootloader                                                            &bootloader             &none  &kp C_BRIGHTNESS_DEC  &kp C_BRIGHTNESS_INC  &none       &none  &none
&none  &none         &none         &none         &none         &none         &none        &m_bt_profile  &w_bt_profile      &bt BT_CLR  &none       &rgb_ug RGB_MEFS_CMD 5  &none  &kp K_PREV            &kp K_PLAY_PAUSE      &kp K_NEXT  &none  &none
&none  &none         &none         &none         &macro_ver    &none                                     &none              &none                                           &none  &kp C_VOLUME_DOWN     &kp C_VOLUME_UP       &kp K_MUTE  &none  &none
&none  &none         &none         &none         &none                       &to 0        &to 6          &to 13             &none       &bl BL_TOG  &rgb_ug RGB_TOG                &bl BL_INC            &bl BL_DEC            &none       &none  &none
            >;
        };
    };

    conditional_layers { compatible = "zmk,conditional-layers"; };
};
