/*
 * Copyright (c) 2020 The ZMK Contributors
 *
 * SPDX-License-Identifier: MIT
 */
/* THIS FILE WAS GENERATED!
 *
 * This file was generated automatically. You may or may not want to
 * edit it directly.
 */

#include <behaviors.dtsi>
#include <dt-bindings/zmk/backlight.h>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/rgb.h>

&caps_word { continue-list = <UNDERSCORE BACKSPACE DELETE NUMBER_1 NUMBER_2 NUMBER_3 NUMBER_4 NUMBER_5 NUMBER_6 NUMBER_7 NUMBER_8 NUMBER_9 NUMBER_0 MINUS KP_MINUS>; };

&sl {
    ignore-modifiers;
    release-after-ms = <3000>;
};

&sk {
    quick-release;
    release-after-ms = <3000>;
};

/ {
    behaviors {
        #include "macros.dtsi"
    #include "version.dtsi"

        hml: hml {
            compatible = "zmk,behavior-hold-tap";
            label = "hmk";
            #binding-cells = <2>;
            tapping-term-ms = <270>;
            flavor = "balanced";
            bindings = <&kp>, <&kp>;

            quick-tap-ms = <175>;
            hold-trigger-key-positions = <7 8 9 10 11 12 13 21 22 23 24 25 26 27 38 39 40 41 42 43 44 45 54 55 56 57 58 59 71 72 73 74 75 37 38 39 40 41 42 43 44 53 54 55 56 57 58 68 69 70 71 72 73 74 35 36 37 38 52 53 65 66 67 68 69 70 71 72 73>;
            require-prior-idle-ms = <150>;
            hold-trigger-on-release;
        };

        hmr: hmr {
            compatible = "zmk,behavior-hold-tap";
            label = "HMR";
            #binding-cells = <2>;
            tapping-term-ms = <270>;
            flavor = "balanced";
            bindings = <&kp>, <&kp>;

            quick-tap-ms = <175>;
            hold-trigger-on-release;
            hold-trigger-key-positions = <0 1 2 3 4 5 6 14 15 16 17 18 19 20 28 29 30 31 32 33 34 35 36 46 47 48 49 50 51 52 60 61 62 63 64 65 66 67 37 38 53 68 69 70>;
            require-prior-idle-ms = <150>;
        };

        hmsl: hmsl {
            compatible = "zmk,behavior-hold-tap";
            label = "HMSL";
            bindings = <&kp>, <&kp>;

            #binding-cells = <2>;
            hold-trigger-key-positions = <7 8 9 10 11 12 13 21 22 23 24 25 26 27 37 38 39 40 41 42 43 44 45 53 54 55 56 57 58 59 68 69 70 71 72 73 74 75 35 36 37 38 52 53 65 66 67 68 69>;
            flavor = "tap-preferred";
            tapping-term-ms = <110>;
            quick-tap-ms = <300>;
            require-prior-idle-ms = <80>;
        };

        hmsr: hmsr {
            compatible = "zmk,behavior-hold-tap";
            label = "HMSR";
            bindings = <&kp>, <&kp>;

            #binding-cells = <2>;
            flavor = "tap-preferred";
            tapping-term-ms = <110>;
            quick-tap-ms = <300>;
            require-prior-idle-ms = <80>;
            hold-trigger-key-positions = <0 1 2 3 4 5 6 14 15 16 17 18 19 20 28 29 30 31 32 33 34 35 36 46 47 48 49 50 51 52 60 61 62 63 64 65 66 67 37 38 53 68 69 70>;
        };

        space: space {
            compatible = "zmk,behavior-hold-tap";
            label = "SPACE";
            bindings = <&mo>, <&kp>;

            #binding-cells = <2>;
            flavor = "balanced";
            tapping-term-ms = <200>;
        };

        M_UndoRedo: M_UndoRedo {
            compatible = "zmk,behavior-mod-morph";
            label = "M_UNDOREDO";
            bindings = <&kp LG(Z)>, <&kp LS(LG(Z))>;

            #binding-cells = <0>;
            mods = <(MOD_RSFT)>;
        };

        w_UndoRedo: w_UndoRedo {
            compatible = "zmk,behavior-mod-morph";
            label = "W_UNDOREDO";
            bindings = <&kp LC(Z)>, <&kp LS(LC(Z))>;

            #binding-cells = <0>;
            mods = <(MOD_RSFT)>;
        };

        w_alt_tab_behaviour: w_alt_tab_behaviour {
            compatible = "zmk,behavior-hold-tap";
            label = "W_ALT_TAB_BEHAVIOUR";
            bindings = <&w_alt_tab_layer>, <&kp>;

            #binding-cells = <2>;
            tapping-term-ms = <150>;
            flavor = "hold-preferred";
        };

        thumb: thumb {
            compatible = "zmk,behavior-hold-tap";
            label = "THUMB";
            bindings = <&mo>, <&kp>;

            #binding-cells = <2>;
            tapping-term-ms = <200>;
        };

        m_select_word_mod: m_select_word_mod {
            compatible = "zmk,behavior-mod-morph";
            label = "M_SELECT_WORD_MOD";
            bindings = <&m_select_word_right>, <&m_select_word_left>;

            #binding-cells = <0>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
        };

        w_select_word_mod: w_select_word_mod {
            compatible = "zmk,behavior-mod-morph";
            label = "W_SELECT_WORD_MOD";
            bindings = <&w_select_word_right>, <&w_select_word_left>;

            #binding-cells = <0>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
        };

        w_select_line_all: w_select_line_all {
            compatible = "zmk,behavior-tap-dance";
            label = "W_SELECT_LINE_ALL";
            #binding-cells = <0>;
            bindings = <&w_select_line>, <&kp LC(A)>;
        };

        m_select_line_all: m_select_line_all {
            compatible = "zmk,behavior-tap-dance";
            label = "M_SELECT_LINE_ALL";
            #binding-cells = <0>;
            bindings = <&m_select_line>, <&kp LG(A)>;
        };

        thumb_mod: thumb_mod {
            compatible = "zmk,behavior-hold-tap";
            label = "THUMB_MOD";
            bindings = <&kp>, <&kp>;

            #binding-cells = <2>;
            tapping-term-ms = <200>;
        };

        m_nav_to_sym_macro_behavior: m_nav_to_sym_macro_behavior {
            compatible = "zmk,behavior-hold-tap";
            label = "M_NAV_TO_SYM_MACRO_BEHAVIOR";
            bindings = <&m_from_sym_to_nav>, <&kp>;

            #binding-cells = <2>;
            tapping-term-ms = <200>;
        };

        w_nav_to_sym_macro_behavior: w_nav_to_sym_macro_behavior {
            compatible = "zmk,behavior-hold-tap";
            label = "W_NAV_TO_SYM_MACRO_BEHAVIOR";
            bindings = <&w_from_nav_to_sym>, <&kp>;

            #binding-cells = <2>;
            tapping-term-ms = <200>;
        };

        thumb_kp_sticky_key: thumb_kp_sticky_key {
            compatible = "zmk,behavior-hold-tap";
            label = "THUMB_KP_STICKY_KEY";
            bindings = <&kp>, <&sk>;

            #binding-cells = <2>;
            tapping-term-ms = <200>;
            hold-while-undecided-linger;
        };

        layer_toggle_moment: layer_toggle_moment {
            compatible = "zmk,behavior-hold-tap";
            label = "LAYER_TOGGLE_MOMENT";
            bindings = <&mo>, <&tog>;

            #binding-cells = <2>;
            flavor = "tap-preferred";
            tapping-term-ms = <175>;
        };

        w_left_mod_alt_tab_layer: w_left_mod_alt_tab_layer {
            compatible = "zmk,behavior-hold-tap";
            label = "W_LEFT_MOD_ALT_TAB_LAYER";
            bindings = <&w_alt_tab_layer>, <&sl>;

            #binding-cells = <2>;
            tapping-term-ms = <99999>;
            quick-tap-ms = <170>;
            flavor = "balanced";
            retro-tap;
            hold-trigger-key-positions = <65 66 69 70>;
        };

        sticky_thumb: sticky_thumb {
            compatible = "zmk,behavior-hold-tap";
            label = "STICKY_THUMB";
            bindings = <&mo>, <&sl>;

            #binding-cells = <2>;
            tapping-term-ms = <200>;
        };

        hml_combo_style: hml_combo_style {
            compatible = "zmk,behavior-hold-tap";
            label = "HML_COMBO_STYLE";
            #binding-cells = <2>;
            tapping-term-ms = <35>;
            flavor = "tap-unless-interrupted";
            bindings = <&kp>, <&kp>;

            quick-tap-ms = <100>;
            hold-trigger-key-positions = <7 8 9 10 11 12 13 21 22 23 24 25 26 27 38 39 40 41 42 43 44 45 54 55 56 57 58 59 71 72 73 74 75 37 38 39 40 41 42 43 44 53 54 55 56 57 58 68 69 70 71 72 73 74 35 36 37 38 52 53 65 66 67 68 69 70 71 72 73>;
            hold-trigger-on-release;
        };

        w_select_line_or_all: w_select_line_or_all {
            compatible = "zmk,behavior-mod-morph";
            label = "W_SELECT_LINE_OR_ALL";
            bindings = <&w_select_line>, <&kp LC(A)>;

            #binding-cells = <0>;
            mods = <(MOD_RSFT)>;
        };

        sticky_layer_mo: sticky_layer_mo {
            compatible = "zmk,behavior-hold-tap";
            label = "STICKY_LAYER_MO";
            bindings = <&mo>, <&sl>;

            #binding-cells = <2>;
            tapping-term-ms = <150>;
            flavor = "tap-preferred";
        };

        m_select_all_or_line: m_select_all_or_line {
            compatible = "zmk,behavior-mod-morph";
            label = "M_SELECT_ALL_OR_LINE";
            bindings = <&w_select_line>, <&kp LG(A)>;

            #binding-cells = <0>;
            mods = <(MOD_RSFT)>;
        };

        kp_sk: kp_sk {
            compatible = "zmk,behavior-hold-tap";
            label = "KP_SK";
            bindings = <&kp>, <&sk>;

            #binding-cells = <2>;
            tapping-term-ms = <200>;
            flavor = "tap-preferred";
        };

        backspace_delete: backspace_delete {
            compatible = "zmk,behavior-mod-morph";
            label = "BACKSPACE_DELETE";
            bindings = <&kp BACKSPACE>, <&kp DELETE>;

            #binding-cells = <0>;
            mods = <(MOD_LGUI)>;
        };

        w_with_lgui_nav: w_with_lgui_nav {
            compatible = "zmk,behavior-hold-tap";
            label = "W_WITH_LGUI_NAV";
            bindings = <&w_lgui_nav>, <&kp>;

            #binding-cells = <2>;
            tapping-term-ms = <200>;
        };

        w_with_lgui_lalt_lctrl_nav: w_with_lgui_lalt_lctrl_nav {
            compatible = "zmk,behavior-hold-tap";
            label = "W_WITH_LGUI_LALT_LCTRL_NAV";
            bindings = <&w_lgui_lctrl_lalt_nav>, <&kp>;

            #binding-cells = <2>;
            tapping-term-ms = <9999>;
        };

        balanced_kp: balanced_kp {
            compatible = "zmk,behavior-hold-tap";
            label = "BALANCED_KP";
            bindings = <&kp>, <&kp>;

            #binding-cells = <2>;
            tapping-term-ms = <250>;
            flavor = "balanced";
        };

        new_behavior: new_behavior {
            compatible = "zmk,behavior-hold-tap";
            label = "NEW_BEHAVIOR";
            bindings = <&w_lgui_nav>, <&kp>;

            #binding-cells = <2>;
            tapping-term-ms = <9999>;
        };

        kp_hold_pref: kp_hold_pref {
            compatible = "zmk,behavior-hold-tap";
            label = "KP_HOLD_PREF";
            bindings = <&kp>, <&kp>;

            #binding-cells = <2>;
            tapping-term-ms = <200>;
        };
    };

    combos {
        compatible = "zmk,combos";

        Win_Nav_Prev_Word {
            bindings = <&kp LC(LEFT)>;
            key-positions = <30 31>;
            layers = <25>;
            timeout-ms = <50>;
        };

        Win_Nav_Next_Word {
            bindings = <&kp RC(RIGHT)>;
            key-positions = <31 32>;
            layers = <25>;
            timeout-ms = <50>;
        };

        Mac_Nav_Pev_Word {
            bindings = <&kp LA(LEFT)>;
            key-positions = <30 31>;
            timeout-ms = <50>;
            layers = <10>;
        };

        Mac_Nav_Next_Word {
            bindings = <&kp RA(RIGHT)>;
            key-positions = <31 32>;
            timeout-ms = <50>;
            layers = <10>;
        };

        m_lock {
            bindings = <&kp LC(LG(Q))>;
            key-positions = <0 13>;
            timeout-ms = <50>;
            layers = <0>;
        };

        m_select_word_nav {
            bindings = <&m_select_word_mod>;
            key-positions = <30 32>;
            timeout-ms = <50>;
            layers = <10>;
        };

        w_select_word_nav {
            bindings = <&w_select_word_mod>;
            key-positions = <30 32>;
            timeout-ms = <50>;
            layers = <25>;
        };

        caps_word {
            bindings = <&caps_word>;
            key-positions = <46 59>;
            timeout-ms = <85>;
            layers = <0 13>;
        };

        left_square_bracket {
            bindings = <&kp LEFT_BRACKET>;
            key-positions = <16 17>;
            layers = <11 26>;
            timeout-ms = <80>;
            require-prior-idle-ms = <(-1)>;
        };

        right_square_bracket {
            bindings = <&kp RIGHT_BRACKET>;
            key-positions = <17 18>;
            timeout-ms = <80>;
            require-prior-idle-ms = <(-1)>;
            layers = <11 26>;
        };

        sym_excl {
            bindings = <&kp EXCL>;
            key-positions = <30 17>;
            layers = <11 26>;
            require-prior-idle-ms = <(-1)>;
            timeout-ms = <85>;
        };

        sym_amp {
            bindings = <&kp AMPS>;
            key-positions = <47 48>;
            timeout-ms = <80>;
            layers = <11 26>;
        };

        sym_tilde {
            bindings = <&kp TILDE>;
            key-positions = <48 49>;
            timeout-ms = <80>;
            layers = <11 26>;
        };

        sym_zero {
            bindings = <&kp N0>;
            key-positions = <55 56>;
            timeout-ms = <35>;
            layers = <11 26 27>;
            require-prior-idle-ms = <(-1)>;
        };

        sym_homedir {
            bindings = <&homedir>;
            key-positions = <48 49 50>;
            timeout-ms = <80>;
            layers = <11 26>;
            require-prior-idle-ms = <(-1)>;
        };

        sym_comma {
            bindings = <&kp COMMA>;
            key-positions = <56 57>;
            timeout-ms = <45>;
            require-prior-idle-ms = <(-1)>;
            layers = <11 26>;
        };

        sym_dot {
            bindings = <&kp DOT>;
            key-positions = <57 58>;
            timeout-ms = <65>;
            layers = <11 26>;
            require-prior-idle-ms = <(-1)>;
        };

        sym_percent {
            bindings = <&kp PERCENT>;
            key-positions = <31 50>;
            timeout-ms = <85>;
            require-prior-idle-ms = <(-1)>;
            layers = <11 26>;
        };

        sym_at_two_key {
            bindings = <&kp AT>;
            key-positions = <31 48>;
            timeout-ms = <85>;
            require-prior-idle-ms = <(-1)>;
            layers = <11 26>;
        };

        sym_question {
            bindings = <&kp QUESTION>;
            key-positions = <32 17>;
            timeout-ms = <85>;
            require-prior-idle-ms = <(-1)>;
            layers = <11 26>;
        };

        m_paste {
            bindings = <&kp LG(V)>;
            key-positions = <64 50>;
            timeout-ms = <250>;
            require-prior-idle-ms = <(-1)>;
            layers = <0 10>;
        };

        w_paste {
            bindings = <&kp LC(V)>;
            key-positions = <64 50>;
            layers = <13 25>;
            timeout-ms = <250>;
            require-prior-idle-ms = <(-1)>;
        };

        enter {
            bindings = <&kp ENTER>;
            key-positions = <50 51>;
            timeout-ms = <75>;
            require-prior-idle-ms = <(-1)>;
            layers = <0 13>;
        };

        m_desktop_switcher {
            bindings = <&m_desktop_layer>;
            key-positions = <41 42>;
            timeout-ms = <50>;
            require-prior-idle-ms = <(-1)>;
            layers = <0>;
        };

        m_paste_alpha {
            bindings = <&kp LG(V)>;
            key-positions = <50 49>;
            timeout-ms = <50>;
            require-prior-idle-ms = <(-1)>;
            layers = <0>;
        };

        w_paste_plain {
            bindings = <&kp LC(V)>;
            key-positions = <50 49>;
            timeout-ms = <50>;
            require-prior-idle-ms = <(-1)>;
            layers = <13>;
        };

        w_alt_tab_right {
            bindings = <&w_alt_tab_layer>;
            key-positions = <43 42 41>;
            timeout-ms = <50>;
            require-prior-idle-ms = <(-1)>;
            layers = <13>;
        };

        m_alt_tab_right {
            bindings = <&m_alt_tab_custom>;
            key-positions = <43 42 41>;
            timeout-ms = <50>;
            require-prior-idle-ms = <(-1)>;
            layers = <0>;
        };

        w_desktop_switcher {
            bindings = <&w_desktop_switcher_layer>;
            key-positions = <41 42>;
            timeout-ms = <50>;
            require-prior-idle-ms = <(-1)>;
            layers = <13>;
        };

        m_browser_tab_sw_prev_combo {
            bindings = <&m_browser_tab_sw_prev_macro>;
            key-positions = <56 55>;
            timeout-ms = <45>;
            require-prior-idle-ms = <(-1)>;
            layers = <0>;
        };

        m_browser_tab_sw_next_combo {
            bindings = <&m_browser_tab_sw_next_macro>;
            key-positions = <56 57>;
            timeout-ms = <45>;
            require-prior-idle-ms = <(-1)>;
            layers = <0>;
        };

        w_browser_tab_sw_prev_combo {
            bindings = <&kp LC(LS(TAB))>;
            key-positions = <56 55>;
            timeout-ms = <45>;
            require-prior-idle-ms = <(-1)>;
            layers = <13>;
        };

        w_browser_tab_sw_next_combo {
            bindings = <&kp LC(TAB)>;
            key-positions = <56 57>;
            timeout-ms = <45>;
            require-prior-idle-ms = <(-1)>;
            layers = <13>;
        };

        esc {
            bindings = <&kp ESCAPE>;
            key-positions = <44 43>;
            timeout-ms = <55>;
            layers = <0 13>;
        };

        m_sticky_caps {
            bindings = <&sk CAPSLOCK>;
            key-positions = <30 31 32>;
            layers = <0>;
            timeout-ms = <50>;
        };

        w_app_layer {
            bindings = <&sl 16>;
            key-positions = <30 32 31>;
            timeout-ms = <65>;
            require-prior-idle-ms = <(-1)>;
            layers = <13>;
        };
    };

    macros {
        layer_with_mod: w_alt_tab {
            compatible = "zmk,behavior-macro-two-param";
            #binding-cells = <2>;
            bindings =
                <&macro_param_1to1>,
                <&macro_press>,
                <&mo MACRO_PLACEHOLDER &macro_param_2to1>,
                <&macro_press>,
                <&kp MACRO_PLACEHOLDER>,
                <&macro_pause_for_release>,
                <&macro_param_2to1>,
                <&macro_release>,
                <&kp MACRO_PLACEHOLDER &macro_param_1to1>,
                <&macro_release>,
                <&mo MACRO_PLACEHOLDER>;

            label = "W_ALT_TAB";
        };

        w_alt_tab_layer: test {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings =
                <&macro_press>,
                <&kp LEFT_ALT>,
                <&macro_tap>,
                <&kp TAB>,
                <&macro_press>,
                <&mo 28>,
                <&macro_pause_for_release>,
                <&macro_release>,
                <&mo 28>,
                <&macro_release>,
                <&kp LEFT_ALT>;

            label = "TEST";
        };

        m_extend_word_left: m_extend_word {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp LS(LA(LEFT))>;
            label = "M_EXTEND_WORD";
        };

        m_extend_word_right: m_extend_word_right {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp LA(LS(RIGHT))>;
            label = "M_EXTEND_WORD_RIGHT";
        };

        w_extend_word_left: w_extend_word_left {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp LS(LC(LEFT))>;
            label = "W_EXTEND_WORD_LEFT";
        };

        w_extend_word_right: w_extend_word_right {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp LC(LS(RIGHT))>;
            label = "W_EXTEND_WORD_RIGHT";
        };

        m_extend_line_left: m_extend_line_left {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp LS(UP_ARROW) &kp LS(LG(LEFT))>;
            label = "M_EXTEND_LINE_LEFT";
        };

        m_extend_line_right: m_extend_line_right {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp LS(DOWN) &kp LS(LG(RIGHT))>;
            label = "M_EXTEND_LINE_RIGHT";
        };

        w_extend_line_left: w_extend_line_left {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp LS(UP_ARROW) &kp LS(HOME)>;
            label = "W_EXTEND_LINE_LEFT";
        };

        w_extend_line_right: w_extend_line_right {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp LS(DOWN) &kp LS(END)>;
            label = "W_EXTEND_LINE_RIGHT";
        };

        m_select_line: m_select_line {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp LG(LEFT) &kp LG(LS(RIGHT))>;
            label = "M_SELECT_LINE";
        };

        w_select_line: w_select_line {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp HOME &kp LS(END)>;
            label = "W_SELECT_LINE";
        };

        m_select_word_left: m_select_word_left {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp LA(LEFT) &kp LA(RIGHT) &kp LS(LA(LEFT))>;
            label = "M_SELECT_WORD_LEFT";
        };

        m_select_word_right: m_select_word_right {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp LA(RIGHT) &kp LA(LEFT) &kp LA(LS(RIGHT))>;
            label = "M_SELECT_WORD_RIGHT";
        };

        w_select_word_left: w_select_word_left {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp LC(LEFT) &kp LC(RIGHT) &kp LC(LS(LEFT))>;
            label = "W_SELECT_WORD_LEFT";
        };

        w_select_word_right: w_select_word_right {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp LC(RIGHT) &kp LC(LEFT) &kp LC(LS(RIGHT))>;
            label = "W_SELECT_WORD_RIGHT";
        };

        m_delete_line: m_delete_line {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp LG(LEFT) &kp LG(DELETE)>;
            label = "M_DELETE_LINE";
        };

        w_delete_line: w_delete_line {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp HOME &kp LS(END) &kp BACKSPACE>;
            label = "W_DELETE_LINE";
        };

        m_bt_profile: m_bt_profile {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&to 0 &bt BT_SEL 0>;
            label = "M_BT_PROFILE";
        };

        w_bt_profile: w_bt_profile {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&to 13 &bt BT_SEL 1>;
            label = "W_BT_PROFILE";
        };

        m_next_lang: m_next_lang {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp LCTRL &kp LALT &kp SPACE>;
            label = "M_NEXT_LANG";
        };

        m_from_sym_to_nav: m_from_nav_to_sym {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings =
                <&macro_release>,
                <&mo 11>,
                <&macro_press>,
                <&mo 10>,
                <&macro_pause_for_release>,
                <&macro_release>,
                <&mo 10>,
                <&macro_press>,
                <&mo 11>;

            label = "M_FROM_NAV_TO_SYM";
            wait-ms = <5>;
        };

        backspace_repeat: backspace_repeat {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings =
                <&macro_press>,
                <&kp BACKSPACE &key_repeat>,
                <&macro_pause_for_release>,
                <&macro_release>,
                <&kp BACKSPACE>;

            label = "BACKSPACE_REPEAT";
        };

        enter_repeat: enter_repeat {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings =
                <&macro_press>,
                <&kp ENTER &key_repeat>,
                <&macro_pause_for_release>,
                <&macro_release>,
                <&kp ENTER>;

            label = "ENTER_REPEAT";
        };

        whitespace_repeat: whitespace_repeat {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings =
                <&macro_press>,
                <&kp SPACE &key_repeat>,
                <&macro_pause_for_release>,
                <&macro_release>,
                <&kp SPACE>;

            label = "WHITESPACE_REPEAT";
        };

        w_from_nav_to_sym: w_from_nav_to_sym {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings =
                <&macro_release>,
                <&mo 26>,
                <&macro_press>,
                <&mo 25>,
                <&macro_pause_for_release>,
                <&macro_release>,
                <&mo 25>,
                <&macro_press>,
                <&mo 26>;

            label = "W_FROM_NAV_TO_SYM";
            wait-ms = <5>;
        };

        homedir: homedir {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp TILDE &kp FSLH>;
            label = "HOMEDIR";
        };

        non_repeat_kp: non_repeat_kp {
            compatible = "zmk,behavior-macro-one-param";
            #binding-cells = <1>;
            bindings =
                <&macro_param_1to1>,
                <&macro_press>,
                <&kp MACRO_PLACEHOLDER &macro_param_1to1>,
                <&macro_release>,
                <&kp MACRO_PLACEHOLDER>;

            label = "NON_REPEAT_KP";
        };

        reset_mod_layer: rest_mod_layer {
            compatible = "zmk,behavior-macro-one-param";
            #binding-cells = <1>;
            bindings =
                <&macro_tap>,
                <&kp F24 &macro_param_1to1>,
                <&macro_press>,
                <&sl MACRO_PLACEHOLDER>,
                <&macro_pause_for_release>,
                <&macro_param_1to1>,
                <&macro_release>,
                <&sl MACRO_PLACEHOLDER>;

            label = "REST_MOD_LAYER";
        };

        win_next_window: win_next_window {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings =
                <&macro_tap>,
                <&kp LC(LA(TAB))>,
                <&macro_tap>,
                <&kp RIGHT>,
                <&macro_tap>,
                <&kp ENTER>;

            label = "WIN_NEXT_WINDOW";
        };

        win_alt_tab_with_release: win_alt_tab_with_release {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings =
                <&macro_tap>,
                <&kp LC(LA(TAB))>,
                <&macro_press>,
                <&mo 28>,
                <&macro_pause_for_release>,
                <&macro_release>,
                <&mo 28>,
                <&macro_tap>,
                <&kp ENTER>;

            label = "WIN_ALT_TAB_WITH_RELEASE";
            wait-ms = <50>;
            tap-ms = <50>;
        };

        w_lgui_nav: w_lgui_nav {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings =
                <&macro_press>,
                <&mo 25>,
                <&macro_press>,
                <&kp LGUI>,
                <&macro_pause_for_release>,
                <&macro_release>,
                <&kp LGUI>,
                <&macro_release>,
                <&mo 25>;

            label = "W_LGUI_NAV";
            wait-ms = <50>;
            tap-ms = <50>;
        };

        w_lgui_lctrl_lalt_nav: w_lgui_lctrl_lalt_nav {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings =
                <&macro_press>,
                <&mo 25>,
                <&macro_press>,
                <&kp LA(LC(LGUI))>,
                <&macro_pause_for_release>,
                <&macro_release>,
                <&kp LA(LC(LGUI))>,
                <&macro_release>,
                <&mo 25>;

            label = "W_LGUI_LCTRL_LALT_NAV";
            wait-ms = <50>;
            tap-ms = <50>;
        };

        m_desktop_layer: m_prev_desktop_layer {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings =
                <&macro_press>,
                <&kp RIGHT_CONTROL>,
                <&macro_press>,
                <&kp RSHIFT>,
                <&macro_press>,
                <&kp RGUI>,
                <&macro_press>,
                <&mo 10>,
                <&macro_pause_for_release>,
                <&macro_release>,
                <&mo 10>,
                <&macro_release>,
                <&kp RGUI>,
                <&macro_release>,
                <&kp RSHIFT>,
                <&macro_release>,
                <&kp RIGHT_CONTROL>;

            label = "M_PREV_DESKTOP_LAYER";
            wait-ms = <20>;
        };

        m_alt_tab_custom: m_alt_tab_custom {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings =
                <&macro_press>,
                <&kp RGUI>,
                <&macro_tap>,
                <&kp TAB>,
                <&macro_press>,
                <&mo 28>,
                <&macro_pause_for_release>,
                <&macro_release>,
                <&mo 28>,
                <&macro_release>,
                <&kp RGUI>;

            label = "M_ALT_TAB_CUSTOM";
            wait-ms = <20>;
            tap-ms = <20>;
        };

        mac_home: mac_mode {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&to 0>, <&macro_tap>, <&kp LS(LA(LC(LG(F11))))>;

            label = "MAC_MODE";
        };

        citadel: citadel {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&to 13>, <&macro_tap>, <&kp LS(LA(LC(LG(F12))))>;

            label = "CITADEL";
        };

        w_desktop_switcher_layer: w_desktop_switcher_layer {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings =
                <&macro_press>,
                <&kp RGUI>,
                <&macro_press>,
                <&kp RIGHT_CONTROL>,
                <&macro_press>,
                <&mo 25>,
                <&macro_pause_for_release>,
                <&macro_release>,
                <&mo 25>,
                <&macro_release>,
                <&kp RIGHT_CONTROL>,
                <&macro_release>,
                <&kp RGUI>;

            label = "W_DESKTOP_SWITCHER_LAYER";
            wait-ms = <20>;
        };

        m_browser_tab_sw_prev_macro: m_browser_tab_witcher_macro {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings =
                <&macro_press>,
                <&kp RCTRL>,
                <&macro_press>,
                <&kp RGUI>,
                <&macro_tap>,
                <&kp RSHIFT>,
                <&macro_tap>,
                <&kp TAB>,
                <&macro_press>,
                <&mo 28>,
                <&macro_pause_for_release>,
                <&macro_release>,
                <&mo 28>,
                <&macro_release>,
                <&kp RGUI>,
                <&macro_release>,
                <&kp RCTRL>;

            label = "M_BROWSER_TAB_WITCHER_MACRO";
            wait-ms = <20>;
            tap-ms = <20>;
        };

        m_browser_tab_sw_next_macro: m_browser_tab_sw_next_macro {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings =
                <&macro_press>,
                <&kp RCTRL>,
                <&macro_press>,
                <&kp RGUI>,
                <&macro_tap>,
                <&kp TAB>,
                <&macro_press>,
                <&mo 28>,
                <&macro_pause_for_release>,
                <&macro_release>,
                <&mo 28>,
                <&macro_release>,
                <&kp RGUI>,
                <&macro_release>,
                <&kp RCTRL>;

            label = "M_BROWSER_TAB_SW_NEXT_MACRO";
            wait-ms = <20>;
            tap-ms = <20>;
        };

        win_first_desktop: win_first_desktop {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings =
                <&macro_tap>,
                <&kp LG(LEFT_ARROW)>,
                <&macro_tap>,
                <&kp LG(LEFT_ARROW)>,
                <&macro_tap>,
                <&kp LG(LEFT_ARROW)>,
                <&macro_tap>,
                <&kp LG(LEFT_ARROW)>;

            label = "WIN_FIRST_DESKTOP";
        };
    };

    keymap {
        compatible = "zmk,keymap";

        MacBase {
            bindings = <
&kp NON_US_BSLH         &kp N1              &kp N2            &kp N3                &kp N4            &kp N5  &layer_toggle_moment 29 10                                                                                                                                                     &layer_toggle_moment 29 12    &kp N6  &kp N7            &kp N8                &kp N9            &kp N0                                 &kp RS(NON_US_BSLH)
&kp TAB                 &kp Q               &kp W             &kp E                 &kp R             &kp T   &kp LA(NON_US_BSLH)                                                                                                                                                            &kp RS(RA(RC(RG(NUMBER_1))))  &kp Y   &kp U             &kp I                 &kp O             &kp P                                  &kp BACKSLASH
&sl 1                   &kp A               &kp S             &kp D                 &kp F             &kp G   &kp LS(LA(LC(LG(NON_US_BSLH))))  &kp INSERT                        &kp LG(LA(LS(LC(UP_ARROW))))      &kp RS(RA(RG(RC(DOWN_ARROW))))  &kp ESCAPE                                &kp RS(RA(RC(RG(NUMBER_4))))  &kp H   &kp J             &kp K                 &kp L             &kp_hold_pref RIGHT_CONTROL SEMICOLON  &sl 1
&kp_sk LSHIFT LSHIFT    &kp Z               &kp X             &kp C                 &kp V             &kp B                                                                      &sticky_layer_mo 12 12            &sticky_layer_mo 12 12                                                                                  &kp N   &kp M             &kp COMMA             &kp DOT           &kp FSLH                               &thumb_kp_sticky_key RSHIFT RSHIFT
&sticky_layer_mo 29 12  &kp_sk LCTRL LCTRL  &kp_sk LALT LALT  &kp_sk LSHIFT LSHIFT  &kp_sk LGUI LGUI          &thumb 11 BACKSPACE              &thumb_mod LA(LG(LSHIFT)) DELETE  &kp LG(SPACE)                     &kp RG(RS(RA(RC(TAB))))         &thumb_mod RA(RC(RG(RIGHT_SHIFT))) ENTER  &space 10 SPACE                       &kp_sk RGUI RGUI  &kp_sk RSHIFT RSHIFT  &kp_sk RALT RALT  &kp_sk RCTRL RCTRL                     &mt RC(NON_US_BSLH) RS(RA(RC(RG(BACKSLASH))))
            >;
        };

        MacMod {
            bindings = <
&none  &none  &none  &none  &none  &none  &none                                                          &none                      &none  &none  &none  &none  &none  &none
&none  &none  &none  &none  &none  &none  &none                                                          &none                      &none  &none  &none  &none  &none  &none
&none  &sl 5  &sl 4  &sl 3  &sl 2  &none  &none                      &kp F24  &none      &none  &kp F24  &none                      &none  &sl 6  &sl 7  &sl 8  &sl 9  &none
&none  &none  &none  &none  &none  &none                                      &none      &none                                      &none  &none  &none  &none  &none  &none
&none  &none  &none  &none  &none         &kp LS(LA(LG(LC(SPACE))))  &kp F24  &none      &none  &none    &kp LS(LA(LG(LC(ENTER))))         &none  &none  &none  &none  &none
            >;
        };

        MacModL_GUI {
            bindings = <
&kp ESCAPE      &kp LG(N1)  &kp LG(N2)  &kp LG(N3)  &kp LG(N4)  &kp LG(N5)  &none                                                          &none          &kp LG(N6)  &kp LG(N7)    &kp LG(N8)     &kp LG(N9)        &kp LG(N0)     &none
&kp LG(TAB)     &kp LG(Q)   &kp LG(W)   &kp LG(E)   &kp LG(R)   &kp LG(T)   &none                                                          &none          &kp LG(Y)   &kp LG(U)     &kp LG(I)      &kp LG(O)         &kp LG(P)      &none
&kp LG(ESCAPE)  &sk LCTRL   &sk LALT    &sk LSHFT   &none       &kp LG(G)   &none         &kp F24         &none      &none  &kp F24        &none          &kp LG(H)   &kp LG(J)     &kp LG(K)      &kp LG(L)         &kp LG(SEMI)   &none
&none           &kp LG(Z)   &kp LG(X)   &kp LG(C)   &kp LG(V)   &kp LG(B)                                 &none      &none                                &kp LG(N)   &kp LG(M)     &kp LG(COMMA)  &kp LG(DOT)       &kp LG(FSLH)   &none
&none           &none       &none       &none       &none                   &kp LG(BSPC)  &kp LG(DELETE)  &none      &none  &kp LG(ENTER)  &kp LG(SPACE)              &kp LG(LEFT)  &kp LG(DOWN)   &kp LG(UP_ARROW)  &kp LG(RIGHT)  &none
            >;
        };

        MacModL_LSHIFT {
            bindings = <
&kp ESCAPE      &kp LS(N1)  &kp LS(N2)  &kp LS(N3)  &kp LS(N4)  &kp LS(N5)  &none                                                          &none          &kp LS(N6)  &kp LS(N7)    &kp LS(N8)     &kp LS(N9)        &kp LS(N0)     &none
&kp LS(TAB)     &kp LS(Q)   &kp LS(W)   &kp LS(E)   &kp LS(R)   &kp LS(T)   &none                                                          &none          &kp LS(Y)   &kp LS(U)     &kp LS(I)      &kp LS(O)         &kp LS(P)      &none
&kp LS(ESCAPE)  &sk LCTRL   &sk LALT    &none       &sk LGUI    &kp LS(G)   &none         &kp F24         &none      &none  &kp F24        &none          &kp LS(H)   &kp LS(J)     &kp LS(K)      &kp LS(L)         &kp LS(SEMI)   &none
&none           &kp LS(Z)   &kp LS(X)   &kp LS(C)   &kp LS(V)   &kp LS(B)                                 &none      &none                                &kp LS(N)   &kp LS(M)     &kp LS(COMMA)  &kp LS(DOT)       &kp LS(FSLH)   &none
&none           &none       &none       &none       &none                   &kp LS(BSPC)  &kp LC(DELETE)  &none      &none  &kp LS(ENTER)  &kp LS(SPACE)              &kp LS(LEFT)  &kp LS(DOWN)   &kp LS(UP_ARROW)  &kp LS(RIGHT)  &none
            >;
        };

        MacModL_LALT {
            bindings = <
&kp ESCAPE      &kp LA(N1)  &kp LA(N2)  &kp LA(N3)  &kp LA(N4)  &kp LA(N5)  &none                                                          &none          &kp LA(N6)  &kp LA(N7)    &kp LA(N8)     &kp LA(N9)        &kp LA(N0)     &none
&kp LA(TAB)     &kp LA(Q)   &kp LA(W)   &kp LA(E)   &kp LA(R)   &kp LA(T)   &none                                                          &none          &kp LA(Y)   &kp LA(U)     &kp LA(I)      &kp LA(O)         &kp LA(P)      &none
&kp LA(ESCAPE)  &sk LCTRL   &none       &sk LSHIFT  &sk LGUI    &kp LA(G)   &none         &kp F24         &none      &none  &kp F24        &none          &kp LA(H)   &kp LA(J)     &kp LA(K)      &kp LA(L)         &kp LA(SEMI)   &none
&none           &kp LA(Z)   &kp LA(X)   &kp LA(C)   &kp LA(V)   &kp LA(B)                                 &none      &none                                &kp LA(N)   &kp LA(M)     &kp LA(COMMA)  &kp LA(DOT)       &kp LA(FSLH)   &none
&none           &none       &none       &none       &none                   &kp LA(BSPC)  &kp LA(DELETE)  &none      &none  &kp LA(ENTER)  &kp LA(SPACE)              &kp LA(LEFT)  &kp LA(DOWN)   &kp LA(UP_ARROW)  &kp LA(RIGHT)  &none
            >;
        };

        MacModL_LCTRL {
            bindings = <
&kp ESCAPE      &kp LC(N1)  &kp LC(N2)  &kp LC(N3)  &kp LC(N4)  &kp LC(N5)  &none                                                          &none          &kp LC(N6)  &kp LC(N7)    &kp LC(N8)     &kp LC(N9)        &kp LC(N0)     &none
&kp LC(TAB)     &kp LC(Q)   &kp LC(W)   &kp LC(E)   &kp LC(R)   &kp LC(T)   &none                                                          &none          &kp LC(Y)   &kp LC(U)     &kp LC(I)      &kp LC(O)         &kp LC(P)      &none
&kp LC(ESCAPE)  &none       &sk LALT    &sk LSHIFT  &sk LGUI    &kp LC(G)   &none         &kp F24         &none      &none  &kp F24        &none          &kp LC(H)   &kp LC(J)     &kp LC(K)      &kp LC(L)         &kp LC(SEMI)   &none
&none           &kp LC(Z)   &kp LC(X)   &kp LC(C)   &kp LC(V)   &kp LC(B)                                 &none      &none                                &kp LC(N)   &kp LC(M)     &kp LC(COMMA)  &kp LC(DOT)       &kp LC(FSLH)   &none
&none           &none       &none       &none       &none                   &kp LC(BSPC)  &kp LC(DELETE)  &none      &none  &kp LC(ENTER)  &kp LC(SPACE)              &kp LC(LEFT)  &kp LC(DOWN)   &kp LC(UP_ARROW)  &kp LC(RIGHT)  &none
            >;
        };

        MacModR_RGUI {
            bindings = <
&kp ESCAPE      &kp RG(N1)  &kp RG(N2)  &kp RG(N3)  &kp RG(N4)  &kp RG(N5)  &none                                                          &none          &kp RG(N6)  &kp RG(N7)    &kp RG(N8)     &kp RG(N9)        &kp RG(N0)     &none
&kp RG(TAB)     &kp RG(Q)   &kp RG(W)   &kp RG(E)   &kp RG(R)   &kp RG(T)   &none                                                          &none          &kp RG(Y)   &kp RG(U)     &kp RG(I)      &kp RG(O)         &kp RG(P)      &none
&kp RG(ESCAPE)  &kp RG(A)   &kp RG(S)   &kp RG(D)   &kp RG(F)   &kp RG(G)   &none         &kp F24         &none      &none  &kp F24        &none          &kp RG(H)   &none         &sk RSHIFT     &sk RALT          &sk RCTRL      &none
&none           &kp RG(Z)   &kp RG(X)   &kp RG(C)   &kp RG(V)   &kp RG(B)                                 &none      &none                                &kp RG(N)   &kp RG(M)     &kp RG(COMMA)  &kp RG(DOT)       &kp RG(FSLH)   &none
&none           &none       &none       &none       &none                   &kp RG(BSPC)  &kp RG(DELETE)  &none      &none  &kp RG(ENTER)  &kp RG(SPACE)              &kp RG(LEFT)  &kp RG(DOWN)   &kp RG(UP_ARROW)  &kp RG(RIGHT)  &none
            >;
        };

        MacModR_RSHIFT {
            bindings = <
&kp ESCAPE      &kp RS(N1)  &kp RS(N2)  &kp RS(N3)  &kp RS(N4)  &kp RS(N5)  &none                                                          &none          &kp RS(N6)  &kp RS(N7)    &kp RS(N8)     &kp RS(N9)        &kp RS(N0)     &none
&kp RS(TAB)     &kp RS(Q)   &kp RS(W)   &kp RS(E)   &kp RS(R)   &kp RS(T)   &none                                                          &none          &kp RS(Y)   &kp RS(U)     &kp RS(I)      &kp RS(O)         &kp RS(P)      &none
&kp RS(ESCAPE)  &kp RS(A)   &kp RS(S)   &kp RS(D)   &kp RS(F)   &kp RS(G)   &none         &kp F24         &none      &none  &kp F24        &none          &kp RS(H)   &sk RGUI      &none          &sk RALT          &sk RCTRL      &kp F24
&none           &kp RS(Z)   &kp RS(X)   &kp RS(C)   &kp RS(V)   &kp RS(B)                                 &none      &none                                &kp RS(N)   &kp RS(M)     &kp RS(COMMA)  &kp RS(DOT)       &kp RS(FSLH)   &none
&none           &none       &none       &none       &none                   &kp RS(BSPC)  &kp RS(DELETE)  &none      &none  &kp RS(ENTER)  &kp RS(SPACE)              &kp RS(LEFT)  &kp RS(DOWN)   &kp RS(UP_ARROW)  &kp RS(RIGHT)  &none
            >;
        };

        MacModR_RALT {
            bindings = <
&kp ESCAPE      &kp RA(N1)  &kp RA(N2)  &kp RA(N3)  &kp RA(N4)  &kp RA(N5)  &none                                                          &none          &kp RA(N6)  &kp RA(N7)    &kp RA(N8)     &kp RA(N9)        &kp RA(N0)     &none
&kp RA(TAB)     &kp RA(Q)   &kp RA(W)   &kp RA(E)   &kp RA(R)   &kp RA(T)   &none                                                          &none          &kp RA(Y)   &kp RA(U)     &kp RA(I)      &kp RA(O)         &kp RA(P)      &none
&kp RA(ESCAPE)  &kp RA(A)   &kp RA(S)   &kp RA(D)   &kp RA(F)   &kp RA(G)   &none         &kp F24         &none      &none  &kp F24        &none          &kp RA(H)   &sk RGUI      &sk RSHIFT     &none             &sk RCTRL      &kp F24
&none           &kp RA(Z)   &kp RA(X)   &kp RA(C)   &kp RA(V)   &kp RA(B)                                 &none      &none                                &kp RA(N)   &kp RA(M)     &kp RA(COMMA)  &kp RA(DOT)       &kp RA(FSLH)   &none
&none           &none       &none       &none       &none                   &kp RA(BSPC)  &kp RA(DELETE)  &none      &none  &kp RA(ENTER)  &kp RA(SPACE)              &kp RA(LEFT)  &kp RA(DOWN)   &kp RA(UP_ARROW)  &kp RA(RIGHT)  &none
            >;
        };

        MacModR_RCTRL {
            bindings = <
&kp ESCAPE      &kp RC(N1)  &kp RC(N2)  &kp RC(N3)  &kp RC(N4)  &kp RC(N5)  &none                                                          &none          &kp RC(N6)  &kp RC(N7)    &kp RC(N8)     &kp RC(N9)        &kp RC(N0)     &none
&kp RC(TAB)     &kp RC(Q)   &kp RC(W)   &kp RC(E)   &kp RC(R)   &kp RC(T)   &none                                                          &none          &kp RC(Y)   &kp RC(U)     &kp RC(I)      &kp RC(O)         &kp RC(P)      &none
&kp RC(ESCAPE)  &kp RC(A)   &kp RC(S)   &kp RC(D)   &kp RC(F)   &kp RC(G)   &none         &kp F24         &none      &none  &kp F24        &none          &kp RC(H)   &sk RGUI      &sk RSHIFT     &sk RALT          &none          &kp F24
&none           &kp RC(Z)   &kp RC(X)   &kp RC(C)   &kp RC(V)   &kp RC(B)                                 &none      &none                                &kp RC(N)   &kp RC(M)     &kp RC(COMMA)  &kp RC(DOT)       &kp RC(FSLH)   &none
&none           &none       &none       &none       &none                   &kp RC(BSPC)  &kp RC(DELETE)  &none      &none  &kp RC(ENTER)  &kp RC(SPACE)              &kp RC(LEFT)  &kp RC(DOWN)   &kp RC(UP_ARROW)  &kp RC(RIGHT)  &none
            >;
        };

        MacNavigation {
            bindings = <
&kp LG(W)  &kp LG(LEFT_BRACKET)   &kp LC(LS(TAB))   &kp LC(TAB)           &kp LG(RIGHT_BRACKET)  &kp LG(T)      &to 0                                                     &to 0                 &none  &kp RC(RS(TAB))  &kp LG(NON_US_BSLH)  &kp RC(TAB)   &none      &none
&none      &none                  &kp LG(LEFT)      &kp UP_ARROW          &kp RG(RIGHT)          &kp PAGE_UP    &kp LG(UP_ARROW)                                          &sk RS(RA(RC(RGUI)))  &none  &kp RG(RS(G))    &kp RG(F)            &kp RG(G)     &none      &none
&none      &m_select_all_or_line  &kp LEFT          &kp DOWN              &kp RIGHT              &kp PAGE_DOWN  &kp LG(DOWN)         &to 0       &none      &none  &to 0  &sk RS(RA(RGUI))      &none  &kp RGUI         &kp RSHIFT           &kp RALT      &kp RCTRL  &kp ENTER
&none      &kp Z                  &kp X             &kp C                 &kp V                  &kp B                                           &none      &none                               &none  &none            &none                &none         &none      &none
&none      &kp_sk LCTRL LCTRL     &kp_sk LALT LALT  &kp_sk LSHIFT LSHIFT  &kp_sk LGUI LGUI                      &thumb 11 BACKSPACE  &kp DELETE  &none      &none  &none  &kp SPACE                    &kp LEFT         &kp DOWN             &kp UP_ARROW  &kp RIGHT  &none
            >;
        };

        MacSymbols {
            bindings = <
&kp GRAVE         &kp BACKSLASH      &kp LEFT_PARENTHESIS  &kp RIGHT_PARENTHESIS   &kp SEMICOLON     &kp COMMA      &none                                                                                   &none                 &none          &none               &none           &none               &none                 &kp BACKSLASH
&kp EXCLAMATION   &kp LEFT_BRACE     &kp SINGLE_QUOTE      &kp DOUBLE_QUOTES       &kp RIGHT_BRACE   &kp QUESTION   &kp AT                                                                                  &kp RA(DELETE)        &kp DELETE     &kp N7              &kp N8          &kp N9              &kp MINUS             &kp TAB
&kp POUND         &hml LCTRL CARET   &hml LALT EQUAL       &hml LSHIFT UNDERSCORE  &hml LGUI DOLLAR  &kp STAR       &kp PERCENT  &none  &none      &kp BACKSLASH  &kp N0                                    &kp RA(BACKSPACE)     &kp BACKSPACE  &hmr RGUI NUMBER_4  &hmr RSHIFT N5  &hmr RALT NUMBER_6  &hmr RCTRL SEMICOLON  &kp ENTER
&kp COLON         &kp LESS_THAN      &kp PIPE              &kp MINUS               &kp GREATER_THAN  &kp KP_DIVIDE                      &none      &kp DOT                                                                        &none          &kp NUMBER_1        &kp NUMBER_2    &kp NUMBER_3        &kp SLASH             &none
&kp LEFT_BRACKET  &kp RIGHT_BRACKET  &kp TILDE             &kp AMPS                &kp PLUS                         &trans       &none  &none      &kp COMMA      &thumb_mod RA(RC(RG(RIGHT_SHIFT))) ENTER  &non_repeat_kp SPACE                 &kp N0              &kp PLUS        &kp MINUS           &kp RIGHT             &none
            >;
        };

        Mac_Fn_Sticky {
            bindings = <
&kp F11  &kp F1     &kp F2    &kp F3      &kp F4    &kp F5  &to 0                                                                                 &to 0                  &kp F6  &kp F7  &kp F8  &kp F9  &kp F10  &kp F12
&none    &none      &none     &none       &none     &none   &sk LS(LA(LG(LCTRL)))                                                                 &sk RS(RA(RG(RCTRL)))  &none   &kp F7  &kp F8  &kp F9  &kp F12  &kp DELETE
&to 0    &sk LCTRL  &sk LALT  &sk LSHIFT  &sk LGUI  &none   &sk LS(LA(LCTRL))      &to 0          &kp C_NEXT          &kp C_MUTE         &kp F12  &sk RS(RA(RCTRL))      &none   &kp F4  &kp F5  &kp F6  &kp F11  &kp PRINTSCREEN
&none    &none      &none     &none       &none     &none                                         &kp C_PP            &kp C_VOL_UP                                       &none   &kp F1  &kp F2  &kp F3  &kp F10  &none
&to 0    &none      &none     &none       &none             &kp C_BRI_DEC          &kp C_BRI_INC  &kp C_PREVIOUS      &kp C_VOLUME_DOWN  &kp F10  &kp F11                        &none   &none   &none   &none    &none
            >;
        };

        WinBase {
            bindings = <
&kp EQUAL                           &kp N1            &kp N2            &kp N3                &kp N4              &kp N5  &layer_toggle_moment 29 25                                                                                                       &layer_toggle_moment 29 0  &kp N6  &kp N7              &kp N8                &kp N9            &kp N0            &kp MINUS
&kp TAB                             &kp Q             &kp W             &kp E                 &kp R               &kp T   &none                                                                                                                            &none                      &kp Y   &kp U               &kp I                 &kp O             &kp P             &none
&sl 15                              &kp A             &kp S             &kp D                 &kp F               &kp G   &sk LS(LA(LCTRL))           &kp INS                          &kp LWIN             &kp RC(RS(RA(F10)))  &kp ESCAPE                &sk RS(RA(RCTRL))          &kp H   &kp J               &kp K                 &kp L             &kp SEMICOLON     &sl 15
&thumb_kp_sticky_key LSHIFT LSHIFT  &kp Z             &kp X             &kp C                 &kp V               &kp B                                                                &kp LG(PAGE_UP)      &kp RA(RC(RS(F11)))                                                       &kp N   &kp M               &kp COMMA             &kp PERIOD        &kp SLASH         &thumb_kp_sticky_key RSHIFT RSHIFT
&sticky_layer_mo 29 27              &kp_sk LGUI LGUI  &kp_sk LALT LALT  &kp_sk LSHIFT LSHIFT  &kp_sk LCTRL LCTRL          &thumb 26 BACKSPACE         &thumb_mod LS(LA(LCTRL)) DELETE  &sl 16               &sl 27               &w_with_lgui_nav 0 ENTER  &space 25 SPACE                    &kp_sk RCTRL RCTRL  &kp_sk RSHIFT RSHIFT  &kp_sk RALT RALT  &kp_sk RGUI RGUI  &sl 27
            >;
        };

        WinBase_Right_On_Left {
            bindings = <
&none                               &kp N6            &kp N7            &kp N8                &kp N9              &kp N0    &layer_toggle_moment 29 25                                                        &none  &none  &none  &none  &none  &none  &none
&kp TAB                             &kp Y             &kp U             &kp I                 &kp O               &kp P     &sk LS(LA(LG(LCTRL)))                                                             &none  &none  &none  &none  &none  &none  &none
&sl 15                              &kp H             &kp J             &kp K                 &kp L               &kp SEMI  &sk LS(LA(LCTRL))           &kp ESC                  &kp LC(Z)      &none  &none  &none  &none  &none  &none  &none  &none  &none
&thumb_kp_sticky_key LSHIFT LSHIFT  &kp N             &kp M             &kp COMMA             &kp DOT             &kp FSLH                                                       &kp LC(C)      &none                &none  &none  &none  &none  &none  &none
&sl 27                              &kp_sk LGUI LGUI  &kp_sk LALT LALT  &kp_sk LSHIFT LSHIFT  &kp_sk LCTRL LCTRL            &space 25 SPACE             &thumb_mod LSHIFT ENTER  &kp LC(V)      &none  &none  &none         &none  &none  &none  &none  &none
            >;
        };

        WinMod {
            bindings = <
&none  &none      &none      &none   &none   &none  &none                                       &none   &none  &none   &none   &none   &none   &none
&none  &kp KP_N1  &kp KP_N2  &none   &none   &none  &none                                       &none   &none  &none   &none   &none   &none   &none
&none  &sl 20     &sl 19     &sl 18  &sl 17  &none  &none   &kp F24  &none      &none  &kp F24  &none   &none  &sl 21  &sl 22  &sl 23  &sl 24  &none
&none  &none      &none      &none   &none   &none                   &none      &none                   &none  &none   &none   &none   &none   &none
&none  &none      &none      &none   &none          &sl 16  &kp F24  &none      &none  &none    &sl 16         &none   &none   &none   &none   &none
            >;
        };

        WinVirtDesktop {
            bindings = <
&none  &none                &none                &none                &none                &none                &none                                         &none         &none                &none                &none                &none                &none                &none
&none  &kp LA(KP_NUMBER_1)  &kp LA(KP_NUMBER_2)  &kp LA(KP_NUMBER_3)  &kp LA(KP_NUMBER_4)  &kp LA(KP_NUMBER_5)  &none                                         &none         &kp LA(KP_NUMBER_6)  &kp LA(KP_NUMBER_7)  &kp LA(KP_NUMBER_8)  &kp LA(KP_NUMBER_9)  &kp LA(KP_NUMBER_0)  &none
&none  &kp LC(KP_NUMBER_1)  &kp LC(KP_NUMBER_2)  &kp LC(KP_NUMBER_3)  &kp LA(KP_NUMBER_4)  &kp LC(KP_NUMBER_5)  &none         &none  &none      &none  &none  &none         &kp LC(KP_NUMBER_6)  &kp LC(KP_NUMBER_7)  &kp LC(KP_NUMBER_8)  &kp LC(KP_NUMBER_9)  &kp LC(KP_NUMBER_0)  &none
&none  &kp LG(KP_NUMBER_1)  &kp LG(NUMBER_3)     &kp LG(KP_NUMBER_3)  &kp LG(KP_NUMBER_4)  &kp LG(KP_NUMBER_5)                       &none      &none                       &kp LG(KP_NUMBER_6)  &kp LG(KP_NUMBER_7)  &kp LG(KP_NUMBER_8)  &kp LG(KP_NUMBER_9)  &kp LG(KP_NUMBER_0)  &none
&none  &none                &none                &none                &sk LCTRL                                 &kp KP_CLEAR  &none  &none      &none  &none  &kp KP_ENTER                       &sk LCTRL            &none                &none                &none                &none
            >;
        };

        WinModL_LCTRL {
            bindings = <
&kp ESCAPE      &kp LC(N1)  &kp LC(N2)  &kp LC(N3)  &kp LC(N4)  &kp LC(N5)  &none                                                          &none          &kp LC(N6)  &kp LC(N7)    &kp LC(N8)     &kp LC(N9)        &kp LC(N0)     &none
&kp LC(TAB)     &kp LC(Q)   &kp LC(W)   &kp LC(E)   &kp LC(R)   &kp LC(T)   &none                                                          &none          &kp LC(Y)   &kp LC(U)     &kp LC(I)      &kp LC(O)         &kp LC(P)      &none
&kp LC(ESCAPE)  &sk LCMD    &sk LALT    &sk LSHIFT  &none       &kp LC(G)   &none         &kp F24         &none      &none  &kp F24        &none          &kp LC(H)   &kp LC(J)     &kp LC(K)      &kp LC(L)         &kp LC(SEMI)   &none
&none           &kp LC(Z)   &kp LC(X)   &kp LC(C)   &kp LC(V)   &kp LC(B)                                 &none      &none                                &kp LC(N)   &kp LC(M)     &kp LC(COMMA)  &kp LC(DOT)       &kp LC(FSLH)   &none
&none           &none       &none       &none       &none                   &kp LC(BSPC)  &kp LC(DELETE)  &none      &none  &kp LC(ENTER)  &kp LC(SPACE)              &kp LC(LEFT)  &kp LC(DOWN)   &kp LC(UP_ARROW)  &kp LC(RIGHT)  &none
            >;
        };

        WinModL_LSHIFT {
            bindings = <
&kp ESCAPE      &kp LS(N1)  &kp LS(N2)  &kp LS(N3)  &kp LS(N4)  &kp LS(N5)  &none                                                          &none          &kp LS(N6)  &kp LS(N7)    &kp LS(N8)     &kp LS(N9)        &kp LS(N0)     &none
&kp LS(TAB)     &kp LS(Q)   &kp LS(W)   &kp LS(E)   &kp LS(R)   &kp LS(T)   &none                                                          &none          &kp LS(Y)   &kp LS(U)     &kp LS(I)      &kp LS(O)         &kp LS(P)      &none
&kp LS(ESCAPE)  &sk LCMD    &sk LALT    &none       &sk LCTRL   &kp LS(G)   &none         &kp F24         &none      &none  &kp F24        &none          &kp LS(H)   &kp LS(J)     &kp LS(K)      &kp LS(L)         &kp LS(SEMI)   &none
&none           &kp LS(Z)   &kp LS(X)   &kp LS(C)   &kp LS(V)   &kp LS(B)                                 &none      &none                                &kp LS(N)   &kp LS(M)     &kp LS(COMMA)  &kp LS(DOT)       &kp LS(FSLH)   &none
&none           &none       &none       &none       &none                   &kp LS(BSPC)  &kp LS(DELETE)  &none      &none  &kp LS(ENTER)  &kp LS(SPACE)              &kp LS(LEFT)  &kp LS(DOWN)   &kp LS(UP_ARROW)  &kp LS(RIGHT)  &none
            >;
        };

        WinModL_LALT {
            bindings = <
&kp ESCAPE      &kp LA(N1)  &kp LA(N2)  &kp LA(N3)  &kp LA(N4)  &kp LA(N5)  &none                                                          &none          &kp LA(N6)  &kp LA(N7)    &kp LA(N8)     &kp LA(N9)        &kp LA(N0)     &none
&kp LA(TAB)     &kp LA(Q)   &kp LA(W)   &kp LA(E)   &kp LA(R)   &kp LA(T)   &none                                                          &none          &kp LA(Y)   &kp LA(U)     &kp LA(I)      &kp LA(O)         &kp LA(P)      &none
&kp LA(ESCAPE)  &sk LCMD    &none       &sk LSHIFT  &sk LCTRL   &kp LA(G)   &none         &kp F24         &none      &none  &kp F24        &none          &kp LA(H)   &kp LA(J)     &kp LA(K)      &kp LA(L)         &kp LA(SEMI)   &none
&none           &kp LA(Z)   &kp LA(X)   &kp LA(C)   &kp LA(V)   &kp LA(B)                                 &none      &none                                &kp LA(N)   &kp LA(M)     &kp LA(COMMA)  &kp LA(DOT)       &kp LA(FSLH)   &none
&none           &none       &none       &none       &none                   &kp LA(BSPC)  &kp LA(DELETE)  &none      &none  &kp LA(ENTER)  &kp LA(SPACE)              &kp LA(LEFT)  &kp LA(DOWN)   &kp LA(UP_ARROW)  &kp LA(RIGHT)  &none
            >;
        };

        WinModL_LGUI {
            bindings = <
&kp ESCAPE      &kp LG(N1)  &kp LG(N2)  &kp LG(N3)  &kp LG(N4)  &kp LG(N5)  &none                                                          &none          &kp LG(N6)  &kp LG(N7)    &kp LG(N8)     &kp LG(N9)        &kp LG(N0)     &none
&kp LG(TAB)     &kp LG(Q)   &kp LG(W)   &kp LG(E)   &kp LG(R)   &kp LG(T)   &none                                                          &none          &kp LG(Y)   &kp LG(U)     &kp LG(I)      &kp LG(O)         &kp LG(P)      &none
&kp LG(ESCAPE)  &none       &sk LALT    &sk LSHFT   &sk LCTRL   &kp LG(G)   &none         &kp F24         &none      &none  &kp F24        &none          &kp LG(H)   &kp LG(J)     &kp LG(K)      &kp LG(L)         &kp LG(SEMI)   &none
&none           &kp LG(Z)   &kp LG(X)   &kp LG(C)   &kp LG(V)   &kp LG(B)                                 &none      &none                                &kp LG(N)   &kp LG(M)     &kp LG(COMMA)  &kp LG(DOT)       &kp LG(FSLH)   &none
&none           &none       &none       &none       &none                   &kp LG(BSPC)  &kp LG(DELETE)  &none      &none  &kp LG(ENTER)  &kp LG(SPACE)              &kp LG(LEFT)  &kp LG(DOWN)   &kp LG(UP_ARROW)  &kp LG(RIGHT)  &none
            >;
        };

        WinModR_RCTRL {
            bindings = <
&kp ESCAPE      &kp RC(N1)  &kp RC(N2)  &kp RC(N3)  &kp RC(N4)  &kp RC(N5)  &none                                                          &none          &kp RC(N6)  &kp RC(N7)    &kp RC(N8)     &kp RC(N9)        &kp RC(N0)     &none
&kp RC(TAB)     &kp RC(Q)   &kp RC(W)   &kp RC(E)   &kp RC(R)   &kp RC(T)   &none                                                          &none          &kp RC(Y)   &kp RC(U)     &kp RC(I)      &kp RC(O)         &kp RC(P)      &none
&kp RC(ESCAPE)  &kp RC(A)   &kp RC(S)   &kp RC(D)   &kp RC(F)   &kp RC(G)   &none         &kp F24         &none      &none  &kp F24        &none          &kp RC(H)   &none         &sk RSHIFT     &sk RALT          &sk RMETA      &none
&none           &kp RC(Z)   &kp RC(X)   &kp RC(C)   &kp RC(V)   &kp RC(B)                                 &none      &none                                &kp RC(N)   &kp RC(M)     &kp RC(COMMA)  &kp RC(DOT)       &kp RC(FSLH)   &none
&none           &none       &none       &none       &none                   &kp RC(BSPC)  &kp RC(DELETE)  &none      &none  &kp RC(ENTER)  &kp RC(SPACE)              &kp RC(LEFT)  &kp RC(DOWN)   &kp RC(UP_ARROW)  &kp RC(RIGHT)  &none
            >;
        };

        WinModR_RSHIFT {
            bindings = <
&kp ESCAPE      &kp RS(N1)  &kp RS(N2)  &kp RS(N3)  &kp RS(N4)  &kp RS(N5)  &none                                                          &none          &kp RS(N6)  &kp RS(N7)    &kp RS(N8)     &kp RS(N9)        &kp RS(N0)     &none
&kp RS(TAB)     &kp RS(Q)   &kp RS(W)   &kp RS(E)   &kp RS(R)   &kp RS(T)   &none                                                          &none          &kp RS(Y)   &kp RS(U)     &kp RS(I)      &kp RS(O)         &kp RS(P)      &none
&kp RS(ESCAPE)  &kp RS(A)   &kp RS(S)   &kp RS(D)   &kp RS(F)   &kp RS(G)   &none         &kp F24         &none      &none  &kp F24        &none          &kp RS(H)   &sk RCTRL     &none          &sk RALT          &sk RMETA      &none
&none           &kp RS(Z)   &kp RS(X)   &kp RS(C)   &kp RS(V)   &kp RS(B)                                 &none      &none                                &kp RS(N)   &kp RS(M)     &kp RS(COMMA)  &kp RS(DOT)       &kp RS(FSLH)   &none
&none           &none       &none       &none       &none                   &kp RS(BSPC)  &kp RS(DELETE)  &none      &none  &kp RS(ENTER)  &kp RS(SPACE)              &kp RS(LEFT)  &kp RS(DOWN)   &kp RS(UP_ARROW)  &kp RS(RIGHT)  &none
            >;
        };

        WinModR_RALT {
            bindings = <
&kp ESCAPE      &kp RA(N1)  &kp RA(N2)  &kp RA(N3)  &kp RA(N4)  &kp RA(N5)  &none                                                          &none          &kp RA(N6)  &kp RA(N7)    &kp RA(N8)     &kp RA(N9)        &kp RA(N0)     &none
&kp RA(TAB)     &kp RA(Q)   &kp RA(W)   &kp RA(E)   &kp RA(R)   &kp RA(T)   &none                                                          &none          &kp RA(Y)   &kp RA(U)     &kp RA(I)      &kp RA(O)         &kp RA(P)      &none
&kp RA(ESCAPE)  &kp RA(A)   &kp RA(S)   &kp RA(D)   &kp RA(F)   &kp RA(G)   &none         &kp F24         &none      &none  &kp F24        &none          &kp RA(H)   &sk RCTRL     &sk RSHIFT     &none             &sk RMETA      &none
&none           &kp RA(Z)   &kp RA(X)   &kp RA(C)   &kp RA(V)   &kp RA(B)                                 &none      &none                                &kp RA(N)   &kp RA(M)     &kp RA(COMMA)  &kp RA(DOT)       &kp RA(FSLH)   &none
&none           &none       &none       &none       &none                   &kp RA(BSPC)  &kp RA(DELETE)  &none      &none  &kp RA(ENTER)  &kp RA(SPACE)              &kp RA(LEFT)  &kp RA(DOWN)   &kp RA(UP_ARROW)  &kp RA(RIGHT)  &none
            >;
        };

        WinModR_RGUI {
            bindings = <
&kp ESCAPE      &kp RG(N1)  &kp RG(N2)  &kp RG(N3)  &kp RG(N4)  &kp RG(N5)  &none                                                          &none          &kp RG(N6)  &kp RG(N7)    &kp RG(N8)     &kp RG(N9)        &kp RG(N0)     &none
&kp RG(TAB)     &kp RG(Q)   &kp RG(W)   &kp RG(E)   &kp RG(R)   &kp RG(T)   &none                                                          &none          &kp RG(Y)   &kp RG(U)     &kp RG(I)      &kp RG(O)         &kp RG(P)      &none
&kp RG(ESCAPE)  &kp RG(A)   &kp RG(S)   &kp RG(D)   &kp RG(F)   &kp RG(G)   &none         &kp F24         &none      &none  &kp F24        &none          &kp RG(H)   &sk RCTRL     &sk RSHIFT     &sk RALT          &none          &none
&none           &kp RG(Z)   &kp RG(X)   &kp RG(C)   &kp RG(V)   &kp RG(B)                                 &none      &none                                &kp RG(N)   &kp RG(M)     &kp RG(COMMA)  &kp RG(DOT)       &kp RG(FSLH)   &none
&none           &none       &none       &none       &none                   &kp RG(BSPC)  &kp RG(DELETE)  &none      &none  &kp RG(ENTER)  &kp RG(SPACE)              &kp RG(LEFT)  &kp RG(DOWN)   &kp RG(UP_ARROW)  &kp RG(RIGHT)  &none
            >;
        };

        WinNavigation {
            bindings = <
&kp LC(W)  &kp LA(LEFT_ARROW)     &kp LC(LS(TAB))   &kp LC(TAB)           &kp LA(LEFT_ARROW)  &kp LC(T)      &to 13                                                                                 &to 13                 &none             &none             &none             &none             &none       &none
&none      &none                  &kp HOME          &kp UP_ARROW          &kp END             &kp PAGE_UP    &sk LS(LA(LG(LCTRL)))                                                                  &sk RS(RA(RG(RCTRL)))  &none             &kp RS(F3)        &kp RC(F)         &kp F3            &none       &none
&none      &w_select_line_or_all  &kp LEFT          &kp DOWN              &kp RIGHT           &kp PAGE_DOWN  &sk LS(LA(LCTRL))      &to 13                                &none      &none  &to 13  &sk RS(RA(RCTRL))      &kp BACKSPACE     &kp RCTRL         &kp RSHIFT        &kp RALT          &kp RGUI    &kp ENTER
&none      &kp Z                  &kp X             &kp C                 &kp V               &kp B                                                                       &none      &none                                 &kp LG(NUMBER_1)  &kp LG(NUMBER_2)  &kp LG(NUMBER_3)  &kp LG(NUMBER_4)  &kp LG(N5)  &kp LG(NUMBER_6)
&none      &kp_sk LGUI LGUI       &kp_sk LALT LALT  &kp_sk LSHIFT LSHIFT  &kp_sk LCTRL LCTRL                 &thumb 26 BACKSPACE    &thumb_mod LC(LA(LG(LSHIFT))) DELETE  &none      &none  &none   &kp SPACE                                &kp LEFT          &kp DOWN          &kp UP_ARROW      &kp RIGHT   &kp LG(N7)
            >;
        };

        WinSymbols {
            bindings = <
&kp GRAVE         &kp BACKSLASH      &kp LEFT_PARENTHESIS  &kp RIGHT_PARENTHESIS   &kp SEMICOLON      &kp COMMA     &none                                                                                  &none                 &none          &none                &none           &none               &none                 &kp BACKSLASH
&kp EXCL          &kp LEFT_BRACE     &kp SINGLE_QUOTE      &kp DOUBLE_QUOTES       &kp RIGHT_BRACE    &kp QUESTION  &kp AT                                                                                 &kp RC(DELETE)        &kp DELETE     &kp N7               &kp N8          &kp N9              &none                 &kp TAB
&kp HASH          &hml LGUI CARET    &hml LALT EQUAL       &hml LSHIFT UNDERSCORE  &hml LCTRL DOLLAR  &kp ASTERISK  &kp PERCENT  &trans  &trans        &kp BACKSLASH  &kp N0                               &kp RC(BACKSPACE)     &kp BACKSPACE  &hmr RCTRL NUMBER_4  &hmr RSHIFT N5  &hmr RALT NUMBER_6  &hmr RCTRL SEMICOLON  &kp BACKSPACE
&kp COLON         &kp LESS_THAN      &kp PIPE              &kp MINUS               &kp GREATER_THAN   &kp SLASH                          &kp HOME      &kp DOT                                                                   &none          &kp NUMBER_1         &kp NUMBER_2    &kp NUMBER_3        &kp SLASH             &none
&kp LEFT_BRACKET  &kp RIGHT_BRACKET  &kp TILDE             &kp AMPS                &kp KP_PLUS                      &kp SPACE    &trans  &kp END       &kp COMMA      &thumb_mod RA(RC(RG(RSHIFT))) ENTER  &non_repeat_kp SPACE                 &kp N0               &kp PLUS        &kp MINUS           &kp RIGHT             &none
            >;
        };

        Win_Fn_Sticky {
            bindings = <
&kp F1  &kp F2    &kp F3    &kp F4      &kp F5     &kp F6  &to 13                                                                                       &to 13                 &kp F7  &kp F8  &kp F9  &kp F10  &kp F11  &kp F12
&none   &none     &none     &none       &none      &none   &sk LS(LA(LG(LCTRL)))                                                                        &sk RS(RA(RG(RCTRL)))  &none   &kp F7  &kp F8  &kp F9   &kp F12  &kp DELETE
&to 13  &sk LGUI  &sk LALT  &sk LSHIFT  &sk LCTRL  &none   &sk LS(LA(LCTRL))      &tog 13               &kp C_NEXT          &kp C_MUTE         &kp F12  &sk RS(RA(RCTRL))      &none   &kp F4  &kp F5  &kp F6   &kp F11  &kp PRINTSCREEN
&none   &none     &none     &none       &none      &none                                                &kp C_PP            &kp C_VOL_UP                                       &none   &kp F1  &kp F2  &kp F3   &kp F10  &kp SCROLLLOCK
&to 13  &none     &none     &none       &none              &kp C_BRI_DEC          &kp C_BRIGHTNESS_INC  &kp C_PREVIOUS      &kp C_VOLUME_DOWN  &kp F10  &kp F11                        &none   &none   &none    &none    &kp PAUSE_BREAK
            >;
        };

        shift_tab_tab {
            bindings = <
&none  &none  &none     &none         &none      &none  &none                                                &none    &none  &none     &none           &none      &none  &none
&none  &kp Q  &kp W     &kp UP_ARROW  &none      &none  &none                                                &none    &none  &none     &kp UP_ARROW    &none      &none  &none
&none  &none  &kp LEFT  &kp DOWN      &kp RIGHT  &kp G  &none        &none    &none      &none  &kp ESCAPE   &none    &none  &kp LEFT  &kp DOWN_ARROW  &kp RIGHT  &none  &none
&none  &none  &kp X     &none         &none      &none                        &none      &none                        &none  &none     &none           &none      &none  &none
&none  &none  &none     &none         &none             &kp LS(TAB)  &kp TAB  &none      &none  &kp RS(TAB)  &kp TAB         &none     &none           &none      &none  &none
            >;
        };

        Mod {
            bindings = <
&citadel                 &bt BT_SEL 0  &bt BT_SEL 1    &bt BT_SEL 2  &bt BT_SEL 3     &bt BT_SEL 4  &none                                                                                  &none                   &none  &none                 &none                 &none       &none  &none
&mac_home                &none         &kp C_PREVIOUS  &kp C_PP      &kp C_NEXT       &none         &bootloader                                                                            &bootloader             &none  &kp C_BRIGHTNESS_DEC  &kp C_BRIGHTNESS_INC  &none       &none  &none
&kp LS(LA(LC(LG(F10))))  &none         &kp C_VOL_DN    &kp C_MUTE    &kp C_VOLUME_UP  &none         &none          &none                 &kp C_MUTE          &kp C_NEXT      &kp C_MUTE    &rgb_ug RGB_MEFS_CMD 5  &none  &kp K_PREV            &kp K_PLAY_PAUSE      &kp K_NEXT  &none  &none
&kp LS(LA(LC(LG(F9))))   &none         &none           &none         &none            &none                                              &kp C_PP            &kp C_PP                                              &none  &kp C_VOLUME_DOWN     &kp C_VOLUME_UP       &kp K_MUTE  &none  &none
&none                    &none         &to 0           &to 13        &none                          &kp C_BRI_DEC  &kp C_BRIGHTNESS_INC  &kp C_PREVIOUS      &kp C_PREVIOUS  &kp C_VOL_DN  &kp C_VOL_UP                   &bl BL_DEC            &bl BL_INC            &bl BL_TOG  &none  &none
            >;
        };
    };

    conditional_layers { compatible = "zmk,conditional-layers"; };
};
